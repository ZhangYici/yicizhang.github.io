<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA高并发笔记之JMH</title>
      <link href="/2022/10/14/JMH/"/>
      <url>/2022/10/14/JMH/</url>
      
        <content type="html"><![CDATA[<h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><ul><li><a href="#jmh">JMH</a><ul><li><a href="#1jmh%E7%AE%80%E4%BB%8B">1.JMH简介</a></li><li><a href="#12-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">1.2 快速入门</a><ul><li><a href="#121-main%E6%96%B9%E6%B3%95%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%8D%E4%B8%A5%E8%B0%A8">1.2.1 main方法的测试（不严谨）</a></li></ul></li><li><a href="#122-jmh%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">1.2.2 JMH方法进行基准测试</a></li><li><a href="#13-jmh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">1.3 JMH基本用法</a><ul><li><a href="#131-benchmark%E6%A0%87%E8%AE%B0%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95">1.3.1 @Benchmark标记基准测试方法</a></li><li><a href="#132-warmup%E4%BB%A5%E5%8F%8Ameasurement">1.3.2 Warmup以及Measurement</a></li><li><a href="#133-%E5%9B%9B%E7%A7%8Dbenchmarkmode">1.3.3 四种BenchmarkMode</a></li><li><a href="#134-outputtimeunit">1.3.4 OutputTimeUnit</a></li><li><a href="#135%E4%B8%89%E5%A4%A7state%E7%9A%84%E4%BD%BF%E7%94%A8">1.3.5三大State的使用</a></li><li><a href="#136%E4%BD%BF%E7%94%A8param">1.3.6使用@Param</a></li><li><a href="#137-jmh%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6fixture">1.3.7 JMH测试套件(Fixture)</a></li><li><a href="#138-compilercontrol">1.3.8 CompilerControl</a></li></ul></li></ul></li></ul><h2 id="1-JMH简介"><a href="#1-JMH简介" class="headerlink" title="1.JMH简介"></a>1.JMH简介</h2><p>JMH是Java Micro Benchmark Harness的简写，是用于代码微基准测试的工具集。<br>JMH的官网地址:<a href="http://openjdk.java.net/projects/code-tools/jmh/">http://openjdk.java.net/projects/code-tools/jmh/</a></p><h2 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h2><h3 id="1-2-1-main方法的测试（不严谨）"><a href="#1-2-1-main方法的测试（不严谨）" class="headerlink" title="1.2.1 main方法的测试（不严谨）"></a>1.2.1 main方法的测试（不严谨）</h3><p>测试ArrayList和LinkedList的写入10000000次字符串，使用add方法调用，重复执行10次，比较最大值、最小值、平均值（此处忽略了内存开销）。<br></p><p>使用前添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> concurrent.jmh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayVSLinked</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">DATA</span> <span class="operator">=</span> <span class="string">&quot;DUMMY DATA&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_CAPACITY</span> <span class="operator">=</span> <span class="number">10_000_000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MAX_ITERATIONS</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MAX_CAPACITY; i++) &#123;</span><br><span class="line">            list.add(DATA);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arrayListPerfTest</span><span class="params">(<span class="type">int</span> iterations)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt; iterations;i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Stopwatch</span> <span class="variable">stopwatch</span> <span class="operator">=</span> Stopwatch.createStarted();</span><br><span class="line">            test(list);</span><br><span class="line">            System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">linkedListPerfTest</span><span class="params">(<span class="type">int</span> iterations)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt; iterations;i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Stopwatch</span> <span class="variable">stopwatch</span> <span class="operator">=</span> Stopwatch.createStarted();</span><br><span class="line">            test(list);</span><br><span class="line">            System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        arrayListPerfTest(MAX_ITERATIONS);</span><br><span class="line">        System.out.println(Strings.repeat(<span class="string">&quot;#&quot;</span>,<span class="number">100</span>));</span><br><span class="line">        linkedListPerfTest(MAX_ITERATIONS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为<br></p><table><thead><tr><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>105</td><td>1073</td></tr><tr><td>90</td><td>32</td></tr><tr><td>114</td><td>67</td></tr><tr><td>69</td><td>425</td></tr><tr><td>90</td><td>33</td></tr><tr><td>103</td><td>31</td></tr><tr><td>32</td><td>1322</td></tr><tr><td>68</td><td>31</td></tr><tr><td>99</td><td>31</td></tr><tr><td>31</td><td>1556</td></tr></tbody></table><p>折线图为：<br><img src="/./JMH/image1.png"><br>ArrayList的性能看起来好于LinkedList，事实上ArrayList的随机读写性能好于LinkedList，但是LinkedList是链表结构设计，其delete性能会好于ArrayList。<br>存在的问题：</p><ol><li>Stopwatch进行计算，会导致CPU时间浪费</li><li>JVM可能会对运行时优化，如循环展开、运行时编译</li><li>两个方法的运行环境不公平，第一个方法结束后JVM可能已经惊醒了profiler优化或者内存未被释放。</li></ol><h2 id="1-2-2-JMH方法进行基准测试"><a href="#1-2-2-JMH方法进行基准测试" class="headerlink" title="1.2.2 JMH方法进行基准测试"></a>1.2.2 JMH方法进行基准测试</h2><p>在maven中添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>java代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> concurrent.jmh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">DATA</span> <span class="operator">=</span> <span class="string">&quot;DUMMY DATA&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; arrayList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup(Level.Invocation)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.linkedList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">arrayListAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">            <span class="built_in">this</span>.arrayList.add(DATA);</span><br><span class="line">        <span class="keyword">return</span> arrayList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">linkedListAdd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++)</span><br><span class="line">            <span class="built_in">this</span>.linkedList.add(DATA);</span><br><span class="line">        <span class="keyword">return</span> linkedList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample01.class.getSimpleName()).forks(<span class="number">1</span>).measurementIterations(<span class="number">10</span>).warmupIterations(<span class="number">10</span>).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(opts).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JMH version: 1.35</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM options: -Dvisualvm.<span class="built_in">id</span>=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=<span class="literal">false</span> to <span class="built_in">disable</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Measurement: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Timeout: 10 min per iteration</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Threads: 1 thread, will synchronize iterations</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Benchmark mode: Average time, time/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Benchmark: concurrent.jmh.JMHExample01.arrayListAdd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run progress: 0.00% complete, ETA 00:06:40</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Fork: 1 of 1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   1: 0.026 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   2: 0.027 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   3: 0.040 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   4: 0.040 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   5: 0.026 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   6: 0.037 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   7: 0.040 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   8: 0.049 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   9: 0.040 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration  10: 0.040 us/op</span></span><br><span class="line">Iteration   1: 0.040 us/op</span><br><span class="line">Iteration   2: 0.027 us/op</span><br><span class="line">Iteration   3: 0.025 us/op</span><br><span class="line">Iteration   4: 0.026 us/op</span><br><span class="line">Iteration   5: 0.025 us/op</span><br><span class="line">Iteration   6: 0.025 us/op</span><br><span class="line">Iteration   7: 0.025 us/op</span><br><span class="line">Iteration   8: 0.025 us/op</span><br><span class="line">Iteration   9: 0.025 us/op</span><br><span class="line">Iteration  10: 0.037 us/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;concurrent.jmh.JMHExample01.arrayListAdd&quot;:</span><br><span class="line">  0.028 ±(99.9%) 0.009 us/op [Average]</span><br><span class="line">  (min, avg, max) = (0.025, 0.028, 0.040), stdev = 0.006</span><br><span class="line">  CI (99.9%): [0.019, 0.037] (assumes normal distribution)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JMH version: 1.35</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM options: -Dvisualvm.<span class="built_in">id</span>=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=<span class="literal">false</span> to <span class="built_in">disable</span>)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Measurement: 10 iterations, 10 s each</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Timeout: 10 min per iteration</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Threads: 1 thread, will synchronize iterations</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Benchmark mode: Average time, time/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Benchmark: concurrent.jmh.JMHExample01.linkedListAdd</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run progress: 50.00% complete, ETA 00:03:21</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Fork: 1 of 1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   1: 0.027 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   2: 0.038 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   3: 0.039 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   4: 0.028 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   5: 0.031 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   6: 0.037 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   7: 0.037 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   8: 0.038 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration   9: 0.038 us/op</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Warmup Iteration  10: 0.038 us/op</span></span><br><span class="line">Iteration   1: 0.039 us/op</span><br><span class="line">Iteration   2: 0.039 us/op</span><br><span class="line">Iteration   3: 0.039 us/op</span><br><span class="line">Iteration   4: 0.041 us/op</span><br><span class="line">Iteration   5: 0.040 us/op</span><br><span class="line">Iteration   6: 0.046 us/op</span><br><span class="line">Iteration   7: 0.038 us/op</span><br><span class="line">Iteration   8: 0.038 us/op</span><br><span class="line">Iteration   9: 0.038 us/op</span><br><span class="line">Iteration  10: 0.038 us/op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result &quot;concurrent.jmh.JMHExample01.linkedListAdd&quot;:</span><br><span class="line">  0.040 ±(99.9%) 0.004 us/op [Average]</span><br><span class="line">  (min, avg, max) = (0.038, 0.040, 0.046), stdev = 0.003</span><br><span class="line">  CI (99.9%): [0.036, 0.044] (assumes normal distribution)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run complete. Total time: 00:06:42</span></span><br><span class="line"></span><br><span class="line">REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on</span><br><span class="line">why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial</span><br><span class="line">experiments, perform baseline and negative tests that provide experimental control, make sure</span><br><span class="line">the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.</span><br><span class="line">Do not assume the numbers tell you what you want them to tell.</span><br><span class="line"></span><br><span class="line">Benchmark                   Mode  Cnt  Score   Error  Units</span><br><span class="line">JMHExample01.arrayListAdd   avgt   10  0.028 ± 0.009  us/op</span><br><span class="line">JMHExample01.linkedListAdd  avgt   10  0.040 ± 0.004  us/op</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-JMH基本用法"><a href="#1-3-JMH基本用法" class="headerlink" title="1.3 JMH基本用法"></a>1.3 JMH基本用法</h2><h3 id="1-3-1-Benchmark标记基准测试方法"><a href="#1-3-1-Benchmark标记基准测试方法" class="headerlink" title="1.3.1 @Benchmark标记基准测试方法"></a>1.3.1 @Benchmark标记基准测试方法</h3><p>被测试的方法需要被标注为@Benchmark<br>否则会被视为普通方法，不会对其进行测试<br>如果一个类中无任何基准测试方法，那么会抛出异常。</p><h3 id="1-3-2-Warmup以及Measurement"><a href="#1-3-2-Warmup以及Measurement" class="headerlink" title="1.3.2 Warmup以及Measurement"></a>1.3.2 Warmup以及Measurement</h3><p>（1）设置全局Warmup和Measurement<br><br>【1】构造options时设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">Options</span> <span class="variable">opts</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample01.class.getSimpleName()).forks(<span class="number">1</span>).</span><br><span class="line">measurementIterations(<span class="number">10</span>).<span class="comment">//度量10次，只有这10次对基准方法的调用将会计入统计</span></span><br><span class="line">warmupIterations(<span class="number">10</span>).<span class="comment">//在度量前，进行10个批次热身，确保代码经过JVM优化</span></span><br><span class="line">build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(opts).run();</span><br></pre></td></tr></table></figure><p>【2】使用注解设置@Measurement和Warmup</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@Measurement(iteration=5)</span><span class="comment">//度量5个批次</span></span><br><span class="line"><span class="meta">@Warmup(iteration=3)</span><span class="comment">//预热3个批次</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample03</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）在基准测试方法上设置Warmup和Measurement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample03</span> &#123;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Measurement(iterations = 10)</span></span><br><span class="line">    <span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample03.class.getSimpleName()).forks(<span class="number">1</span>).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中test()方法执行了2个批次预热和5个批次度量，test2()方法执行了10个批次度量和5个批次预热，方法上的注解会覆盖掉全局的注解。<br></p><hr><p>test()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Warmup: 2 iterations, 10 s each</span><br><span class="line"># Measurement: 5 iterations, 10 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 1 thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Average time, time/op</span><br><span class="line"># Benchmark: concurrent.jmh.JMHExample03.test</span><br></pre></td></tr></table></figure><hr><p>test2()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Warmup: 5 iterations, 10 s each</span><br><span class="line"># Measurement: 10 iterations, 10 s each</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># Threads: 1 thread, will synchronize iterations</span><br><span class="line"># Benchmark mode: Average time, time/op</span><br><span class="line"># Benchmark: concurrent.jmh.JMHExample03.test2</span><br></pre></td></tr></table></figure><p>（3）相关的输出解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"># JMH版本</span><br><span class="line"># JMH version: 1.35</span><br><span class="line"># JDK版本信息</span><br><span class="line"># VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span><br><span class="line"># JAVA命令目录</span><br><span class="line"># VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span><br><span class="line"># JVM参数</span><br><span class="line"># VM options: -Dvisualvm.id=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span><br><span class="line"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span><br><span class="line"># 热身批次为10，每一个批次调用测试方法，每个批次执行时间10s</span><br><span class="line"># Warmup: 10 iterations, 10 s each</span><br><span class="line"># 真正度量批次为10，每个度量的执行时间为10s</span><br><span class="line"># Measurement: 10 iterations, 10 s each</span><br><span class="line"># 每个批次的超时时间</span><br><span class="line"># Timeout: 10 min per iteration</span><br><span class="line"># 基准测试线程数</span><br><span class="line"># Threads: 1 thread, will synchronize iterations</span><br><span class="line"># Benchmark的模式，AverageTime表示调用一次耗费的单位时间（time/op）</span><br><span class="line"># Benchmark mode: Average time, time/op</span><br><span class="line"># Benchmark方法的路径</span><br><span class="line"># Benchmark: concurrent.jmh.JMHExample01.linkedListAdd</span><br><span class="line"># 执行进度</span><br><span class="line"># Run progress: 50.00% complete, ETA 00:03:21</span><br><span class="line"># Fork: 1 of 1</span><br><span class="line"># 10个批次热身，每个批次的调用方法的平均耗时</span><br><span class="line"># Warmup Iteration   1: 0.027 us/op</span><br><span class="line"># Warmup Iteration   2: 0.038 us/op</span><br><span class="line"># Warmup Iteration   3: 0.039 us/op</span><br><span class="line"># Warmup Iteration   4: 0.028 us/op</span><br><span class="line"># Warmup Iteration   5: 0.031 us/op</span><br><span class="line"># Warmup Iteration   6: 0.037 us/op</span><br><span class="line"># Warmup Iteration   7: 0.037 us/op</span><br><span class="line"># Warmup Iteration   8: 0.038 us/op</span><br><span class="line"># Warmup Iteration   9: 0.038 us/op</span><br><span class="line"># Warmup Iteration  10: 0.038 us/op</span><br><span class="line"># 5个批次的度量</span><br><span class="line">Iteration   1: 0.039 us/op</span><br><span class="line">Iteration   2: 0.039 us/op</span><br><span class="line">Iteration   3: 0.039 us/op</span><br><span class="line">Iteration   4: 0.041 us/op</span><br><span class="line">Iteration   5: 0.040 us/op</span><br><span class="line">Iteration   6: 0.046 us/op</span><br><span class="line">Iteration   7: 0.038 us/op</span><br><span class="line">Iteration   8: 0.038 us/op</span><br><span class="line">Iteration   9: 0.038 us/op</span><br><span class="line">Iteration  10: 0.038 us/op</span><br><span class="line"></span><br><span class="line"># 最终结果</span><br><span class="line">Result &quot;concurrent.jmh.JMHExample01.linkedListAdd&quot;:</span><br><span class="line">  0.040 ±(99.9%) 0.004 us/op [Average]</span><br><span class="line">  # 最小，平均，最大和标准误差</span><br><span class="line">  (min, avg, max) = (0.038, 0.040, 0.046), stdev = 0.003</span><br><span class="line">  CI (99.9%): [0.036, 0.044] (assumes normal distribution)</span><br></pre></td></tr></table></figure><h3 id="1-3-3-四种BenchmarkMode"><a href="#1-3-3-四种BenchmarkMode" class="headerlink" title="1.3.3 四种BenchmarkMode"></a>1.3.3 四种BenchmarkMode</h3><p>1.AverageTime（平均响应时间）输出基准测试方法没调用一次的耗时</p><p> 2.Throughput（方法吞吐量）与AverageTime相反，表示单位时间内对该方法调用的次数 </p><p> 3.SampleTime（时间采样）采用抽样方式来统计方法的性能结果。</p><p> 4.SingleShotTime(冷测试)不管是Warmup还是Measurement，每一个批次中基准测试方法只会被执行一次，一般来说，Warmup为0.<P> 5.多Mode以及All，除了设置单个BechmarkMode之外，可以设置多个Mode或者All<br>@BenchmarkMode(Mode.AverageTime,Mode.Throughput)和@BenchmarkMode(Mode.All)</p>注：Options的参数会覆盖方法的注解，方法的注解会覆盖class上的注解<h3 id="1-3-4-OutputTimeUnit"><a href="#1-3-4-OutputTimeUnit" class="headerlink" title="1.3.4 OutputTimeUnit"></a>1.3.4 OutputTimeUnit</h3><p>提供了统计结果输出时的单位，比如调用一次该方法将会耗费多少单位时间，或者单位时间内对该方法进行多少次调用。<br>OutputTimeUnit既可以设置在class上，也可以设置在method上，还可以在Options中设置，覆盖次序与Benchmark一致。</p><h3 id="1-3-5三大State的使用"><a href="#1-3-5三大State的使用" class="headerlink" title="1.3.5三大State的使用"></a>1.3.5三大State的使用</h3><p>三大State分别对应于Scope的三个枚举值</p><ul><li>Benchmark</li><li>Thread</li><li>Group<p>【1】Thread独享的State线程独享的State指的是，每一个运行基准测试方法的线程都会持有一个独立的对象实例，该实例既可以作为基准测试方法传入，也可能是class的注解将State设置为Scope.Thread，一般主要针对非线程安全的类。例如AarrayList和LinkedList。</li></ul><p>【2】Thread共享的State<br>有时候需要测试多线程情况下，梅格雷被不同线程操作的性能，比如，多线程访问某个共享数据，需要让多线程使用同一个实例。因此<br>将State设置为Scope.Benchmark，主要针对线程安全的类</p><p>【3】线程组共享的State<br>截止目前，我们所编写的基准测试方法都会被JMH框架会根据方法名的字典顺序排序后按照顺序逐个调用执行，不存两个方法同时运行的情况，如果想要测试某个共享数据或者共享资源在多线程的情况下同时被读写的行为，例如多个线程对ConcurrentHashMap进行读写。<br>1、多线程情况下的单个实例<br>2、允许一个以上基准测试方法并发允许<br>使用Scope.Group来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 10)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample08</span> &#123;</span><br><span class="line">    <span class="comment">//设置为线程共享</span></span><br><span class="line">    <span class="meta">@State(Scope.Group)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;create instance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在线程组“test”中，有三个线程不断为Test实例的write方法进行调用</span></span><br><span class="line">    <span class="meta">@GroupThreads(3)</span></span><br><span class="line">    <span class="meta">@Group(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWrite</span><span class="params">(Test test)</span>&#123;</span><br><span class="line">        test.write();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在线程组“test”中，有三个线程不断为Test实例的read方法进行调用</span></span><br><span class="line">    <span class="meta">@GroupThreads(3)</span></span><br><span class="line">    <span class="meta">@Group(&quot;test&quot;)</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRead</span><span class="params">(Test test)</span>&#123;</span><br><span class="line">        test.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample08.class.getSimpleName()).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="1-3-6使用-Param"><a href="#1-3-6使用-Param" class="headerlink" title="1.3.6使用@Param"></a>1.3.6使用@Param</h3><p>【1】对比ConcurrentHashMap和SynchronizedMap性能<br><br>需要保证线程安全的Map容器有ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，对比其put操作性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 10)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="comment">//5个线程同时对共享资源操作</span></span><br><span class="line"><span class="meta">@Threads(5)</span></span><br><span class="line"><span class="comment">//设置为线程间共享资源</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Long&gt; concurrentMap;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Long&gt; synchronizedMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">        concurrentMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        synchronizedMap = Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testConcurrencyMap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.concurrentMap.put(System.nanoTime(),System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSychronizedMap</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.synchronizedMap.put(System.nanoTime(),System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample09.class.getSimpleName()).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【2】使用@Param</p><p>@Param可以使得参数配置化，可以测试ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，防止大量的代码冗余</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="meta">@Threads(5)</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample10</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Param(&#123;&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long,Long&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setup</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">               <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">               <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">               <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">               <span class="built_in">this</span>.map = Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal map type&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(System.nanoTime(),System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample10.class.getSimpleName()).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-7-JMH测试套件-Fixture"><a href="#1-3-7-JMH测试套件-Fixture" class="headerlink" title="1.3.7 JMH测试套件(Fixture)"></a>1.3.7 JMH测试套件(Fixture)</h3><p>与Junit单元的套件@Before,@After,@BeforeClass,@AfterClass类似</p><p>【1】Setup以及TearDown<br>JMH提供了两个注解@Setup和@TearDown用于套件测试，其中@Setup会在每一个基准测试方法执行前被调用，通常用于资源的初始化</p><p>@TearDown套件会在基准测试方法被执行之后调用，通常可用于资源的回收清理工作。</p><p>【2】使用seatup和TeadDown时，默认情况下，Setup和TearDown会在一个基准方法的所有批次执行前后分别执行，如果需要在每一个批次或者每一次基准方法调用执行的前后执行对应的套件方法，则需要对@Setup和@TearDown进行简单配置。</p><ul><li>Trial:    Setup和TearDown的默认配置，该套件方法会在每一个基准测试方法的所有批次执行的前后被执行。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setup(Level.Trial)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Setup</span><span class="params">()</span></span><br></pre></td></tr></table></figure><ul><li>Iteration:    由于我们设置Warmup和Measurement，因此每一个基准测试方法都会被执行若干次批次，如果想要在每一个基准测试批次执行的前后调用套件方法，则可以将Level设置为Iteration</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setup(Level.Iteration)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Setup</span><span class="params">()</span></span><br></pre></td></tr></table></figure><ul><li>Invocation: 将Level设置为Invocation意味着在每一个批次的度量过程中，每一次对基准方法的调用前后都会执行该套件方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setup(Level.Invocation)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Setup</span><span class="params">()</span></span><br></pre></td></tr></table></figure></li></ul><p>注：JMH不会将套件方法的执行纳入基准方法测试的统计之中。</p><h3 id="1-3-8-CompilerControl"><a href="#1-3-8-CompilerControl" class="headerlink" title="1.3.8 CompilerControl"></a>1.3.8 CompilerControl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> concurrent.jmh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample12</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Benchmark</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       log(PI);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample12.class.getSimpleName()).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test1()中未进行任何运算，test2()中计算Math.log(Math.PI)</p><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark           Mode  Cnt   Score    Error  Units</span><br><span class="line">JMHExample12.test1  avgt    5   0.001 ±  0.001  us/op</span><br><span class="line">JMHExample12.test2  avgt    5  ≈ 10⁻³           us/op</span><br></pre></td></tr></table></figure><p>其中test1和test2无较大差别，由于test2中存在DeadCode，JVM在运行test2时对程序进行了优化，相关代码在运行期进行擦除。</p><p>通过CompilerControl禁止优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 5)</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MICROSECONDS)</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMHExample12</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.EXCLUDE)</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CompilerControl(CompilerControl.Mode.EXCLUDE)</span></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        log(PI);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Options</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>().include(JMHExample12.class.getSimpleName()).build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(options).run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Benchmark           Mode  Cnt  Score   Error  Units</span><br><span class="line">JMHExample12.test1  avgt    5  0.008 ± 0.005  us/op</span><br><span class="line">JMHExample12.test2  avgt    5  0.059 ± 0.005  us/op</span><br></pre></td></tr></table></figure><p>和预期一致</p><p><strong>结论</strong>：<br>如果想要禁止JVM运行期优化</p><ul><li>通过编写程序方式精致JVM运行期动态变异和优化java.lang.Compiler.disable()</li><li>在JVM中添加参数 <code>-Djava.compiler=NONE</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello1</title>
      <link href="/2022/10/13/hello1/"/>
      <url>/2022/10/13/hello1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/R&amp;W/"/>
      <url>/2022/10/11/R&amp;W/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1><ul><li><input checked="" disabled="" type="checkbox"> c</li><li><input checked="" disabled="" type="checkbox"> bm</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/"/>
      <url>/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast Start Markdown in VS</title>
      <link href="/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/"/>
      <url>/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Fast-Start-Markdown-in-VS"><a href="#Fast-Start-Markdown-in-VS" class="headerlink" title="Fast Start Markdown in VS"></a>Fast Start Markdown in VS</h1><blockquote><p>preference: MarkDown All in One</p></blockquote><ul><li><a href="#fast-start-markdown-in-vs">Fast Start Markdown in VS</a><ul><li><a href="#keyboard-shortcuts">keyboard shortcuts:</a></li><li><a href="#markdown-preview">MarkDown Preview</a></li><li><a href="#formula">formula</a></li><li><a href="#html%E6%A0%87%E8%AE%B0">HTML标记</a></li></ul></li></ul><h2 id="keyboard-shortcuts"><a href="#keyboard-shortcuts" class="headerlink" title="keyboard shortcuts:"></a>keyboard shortcuts:</h2><ul><li>ctrl+B: <strong>字体加粗</strong></li><li><input checked="" disabled="" type="checkbox"> alt+C: 打钩<br></li><li>VScode中通过<code>ctrl+shift+p</code>使用命令：<code>Create Table of Contents</code>自动创建目录</li></ul><h2 id="MarkDown-Preview"><a href="#MarkDown-Preview" class="headerlink" title="MarkDown Preview"></a>MarkDown Preview</h2><p>使用命令<code>ctrl+shift+v</code>预览MarkDown</p><h2 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h2><p>使用<code>$g(x)$</code>来表示$g(x)$<br><br>使用<code>$$ f(x) = ax + b $$</code> 来表示<br>$$ f(x) &#x3D; ax + b $$<br>使用<code>$\a$</code>来快速补全<code>a</code>为前缀的Math符号<br></p><div align=center>![快捷键](./%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/image1.png)</div>## HTML标记使用`<br>`来表示换行]]></content>
      
      
      <categories>
          
          <category> VS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="/2022/09/19/test3/"/>
      <url>/2022/09/19/test3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/19/hello-world/"/>
      <url>/2022/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nvm版本管理</title>
      <link href="/2019/09/05/text/"/>
      <url>/2019/09/05/text/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
