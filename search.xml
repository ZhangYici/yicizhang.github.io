<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多线程架构-第1章快速认识线程</title>
      <link href="/2022/10/24/multithreading-and-architecture-ch1/"/>
      <url>/2022/10/24/multithreading-and-architecture-ch1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E7%AC%AC1%E7%AB%A0%E5%BF%AB%E9%80%9F%E8%AE%A4%E8%AF%86%E7%BA%BF%E7%A8%8B">第1章：快速认识线程</a><ul><li><a href="#11-%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BB%8B%E7%BB%8D">1.1 线程的介绍</a></li><li><a href="#12-jconsole">1.2 Jconsole</a></li><li><a href="#13-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">1.3 线程的生命周期</a><ul><li><a href="#131-new%E7%8A%B6%E6%80%81">1.3.1 NEW状态</a></li><li><a href="#132-runnable%E7%8A%B6%E6%80%81">1.3.2 RUNNABLE状态</a></li><li><a href="#133-running%E7%8A%B6%E6%80%81">1.3.3 RUNNING状态</a></li><li><a href="#134-blocked%E7%8A%B6%E6%80%81">1.3.4 BLOCKED状态</a></li><li><a href="#135-terminated%E7%8A%B6%E6%80%81">1.3.5 TERMINATED状态</a></li></ul></li><li><a href="#14-%E7%BA%BF%E7%A8%8B%E7%9A%84start%E6%96%B9%E6%B3%95">1.4 线程的start方法</a><ul><li><a href="#141-thread-start%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90">1.4.1 Thread start方法源码分析</a></li><li><a href="#142-%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95">1.4.2 实现线程的三种方法</a></li></ul></li></ul></li></ul><h1 id="第1章：快速认识线程"><a href="#第1章：快速认识线程" class="headerlink" title="第1章：快速认识线程"></a>第1章：快速认识线程</h1><h2 id="1-1-线程的介绍"><a href="#1-1-线程的介绍" class="headerlink" title="1.1 线程的介绍"></a>1.1 线程的介绍</h2><p>每一个进程中至少要有一个线程，线程是轻量级的进程。</p><p>每一个线程都有自己的局部变量表、程序计数器PC以及各自的生命周期，当启动了一个JVM时，会创建一个新的JVM进程。</p><h2 id="1-2-Jconsole"><a href="#1-2-Jconsole" class="headerlink" title="1.2 Jconsole"></a>1.2 Jconsole</h2><p>[1] 从命名行启动，使JDK在PATH上，运行命令<code>jconsole</code></p><p>[2] 从GUI shell启动，找到JDK安装路径，打开bin文件夹，启动jconsole。</p><h2 id="1-3-线程的生命周期"><a href="#1-3-线程的生命周期" class="headerlink" title="1.3 线程的生命周期"></a>1.3 线程的生命周期</h2><p>线程的生命周期分为以下5个阶段</p><ul><li>NEW</li><li>RUNNABLE</li><li>RUNNING</li><li>BLOCKED</li><li>TERMINATED</li></ul><h3 id="1-3-1-NEW状态"><a href="#1-3-1-NEW状态" class="headerlink" title="1.3.1 NEW状态"></a>1.3.1 NEW状态</h3><p>用new创建一个Thread对象时，但没有调用start方法启动该线程，此时线程状态为NEW状态</p><h3 id="1-3-2-RUNNABLE状态"><a href="#1-3-2-RUNNABLE状态" class="headerlink" title="1.3.2 RUNNABLE状态"></a>1.3.2 RUNNABLE状态</h3><p>在进程中创建一个线程后，通过start方法调用，此时进入就绪态RUNNABLE，它具备可执行的资格但是需要等待CPU调度。</p><h3 id="1-3-3-RUNNING状态"><a href="#1-3-3-RUNNING状态" class="headerlink" title="1.3.3 RUNNING状态"></a>1.3.3 RUNNING状态</h3><p>一旦CPU通过轮询或者其他方法选中线程执行，此时该线程才能真正执行逻辑代码。</p><ul><li>在RUNNNING状态中，可以直接被STOP进入TERMINATED状态。</li><li>可以调用sleep或者wait进入BLOCKED状态。</li><li>进行某个阻塞的IO操作进入BLOCKED</li><li>获取某个锁，加入该锁的阻塞队列进入BLOCKED</li><li>由于CPU调度器轮询结束，进入RUNNABLE状态。</li><li>主动调用yield方法，放弃CPU执行权，进入RUNNABLE状态。</li></ul><h3 id="1-3-4-BLOCKED状态"><a href="#1-3-4-BLOCKED状态" class="headerlink" title="1.3.4 BLOCKED状态"></a>1.3.4 BLOCKED状态</h3><p>BLOCKED状态可以进入RUNNABLE和TERMINATED，但是不能进入RUNNING</p><ul><li>使用stop方法或者意外死亡JVM Crash进入TERMINATED</li><li>阻塞结束或者休眠结束进入RUNNABLE</li><li>被其他线程notify唤醒，进入RUNNABLE状态</li><li>或者获得锁资源进入RUNNABLE</li></ul><h3 id="1-3-5-TERMINATED状态"><a href="#1-3-5-TERMINATED状态" class="headerlink" title="1.3.5 TERMINATED状态"></a>1.3.5 TERMINATED状态</h3><p>这是线程的最终态，不会切换到其他状态，生命周期已经结束。</p><ul><li>线程运行正常结束，结束生命周期。</li><li>线程出错结束。</li><li>JVM Crash，所有线程都结束。</li></ul><h2 id="1-4-线程的start方法"><a href="#1-4-线程的start方法" class="headerlink" title="1.4 线程的start方法"></a>1.4 线程的start方法</h2><h3 id="1-4-1-Thread-start方法源码分析"><a href="#1-4-1-Thread-start方法源码分析" class="headerlink" title="1.4.1 Thread start方法源码分析"></a>1.4.1 Thread start方法源码分析</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Causes this thread to begin execution; the Java Virtual Machine * calls the &lt;code>run&lt;/code> method of this thread. * &lt;p> * The result is that two threads are running concurrently: the * current thread (which returns from the call to the * &lt;code>start&lt;/code> method) and the other thread (which executes its * &lt;code>run&lt;/code> method). * &lt;p> * It is never legal to start a thread more than once. * In particular, a thread may not be restarted once it has completed * execution. * * @exception  IllegalThreadStateException  if the thread was already *               started. * @see        #run() * @see        #stop() */</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * This method is not invoked for the main method thread or "system"     * group threads created/set up by the VM. Any new functionality added     * to this method in the future may have to also be added to the VM.     *     * A zero status value corresponds to state "NEW".     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Notify the group that this thread is about to be started     * so that it can be added to the group's list of threads     * and the group's unstarted count can be decremented. */</span>    group<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> started <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        started <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>started<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                group<span class="token punctuation">.</span><span class="token function">threadStartFailed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* do nothing. If start0 threw a Throwable then              it will be passed up the call stack */</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">start0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * If this thread was constructed using a separate * &lt;code>Runnable&lt;/code> run object, then that * &lt;code>Runnable&lt;/code> object's &lt;code>run&lt;/code> method is called; * otherwise, this method does nothing and returns. * &lt;p> * Subclasses of &lt;code>Thread&lt;/code> should override this method. * * @see     #start() * @see     #stop() * @see     #Thread(ThreadGroup, Runnable, String) */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Thread通过New创建后处于New状态，事实上在threadStatus的内部属性为0</li><li>不能两次启动Thread，否则会出现IlleagalThreadStateException异常。同样的，如果线程处于TERMINATED状态，也不能再次启动。</li><li>线程启动会加入ThreadGroup中。</li><li>start0()方法会调用run方法()，而start0方法是JNI本地方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * If this thread was constructed using a separate * &lt;code>Runnable&lt;/code> run object, then that * &lt;code>Runnable&lt;/code> object's &lt;code>run&lt;/code> method is called; * otherwise, this method does nothing and returns. * &lt;p> * Subclasses of &lt;code>Thread&lt;/code> should override this method. * * @see     #start() * @see     #stop() * @see     #Thread(ThreadGroup, Runnable, String) */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//target是Runnable类</span>    <span class="token comment">//如果构造Thread时传递了Runnable会执行runnable方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//否则需要重写Thread类的run方法</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-2-实现线程的三种方法"><a href="#1-4-2-实现线程的三种方法" class="headerlink" title="1.4.2 实现线程的三种方法"></a>1.4.2 实现线程的三种方法</h3><p>创建线程线只有一种方法，构造Thread类。</p><p>但是线程的执行单元有三种方法，第一种是重写Thread的run方法，第二种是实现Runnable接口的run方法，并且将Runnable实例用作构造Thread的参数。第三种是实现Callable类，并且将Callable作为构造Thread的参数。</p><p>【1】继承Thread类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 实现方式一：1.继承Thread类 * @author 程就人生 * @Date */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 重写run方法   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名称："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义Thread的子类，重写run方法。</li><li>创建Thread子类的实例</li><li>调用该实例的start方法启动</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 2.创建Thread子类的实例</span>    <span class="token class-name">Thread1</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3.调用线程对象的start来启动该线程</span>    thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】实现Runnable接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 线程实现方式二：1.实现Runnable接口 * 线程任务类 * @author 程就人生 * @Date */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTarget</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">ThreadTarget</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 重写run方法   */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名称："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义Runnable接口的实现类，重写run方法</li><li>创建Runnable实现类的实例，并将。该实例作为参数构造Thread类。</li><li>调用线程的start方法启动该线程。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 3.创建Runnable实现类的实例，它是线程对象运行的target</span>    <span class="token class-name">ThreadTarget</span> threadTarget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTarget</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 该Thread对象才是真正的线程对象</span>    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4.调用线程对象的start来启动该线程</span>    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 共享成员变量</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadTarget<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：多个线程可以使用一个线程任务类，并且共享该类中的实例变量。</p><p>【3】实现callable接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span></span><span class="token punctuation">;</span><span class="token comment">/** * 线程实现方式二：1.实现Callable接口 * @author 程就人生 * @Date */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCall</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 2.重写call方法   */</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程名称："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定义callable接口的实现类，并重写call方法</li><li>创建Callable实现类的对象，使用FutureTask包装该对象，并以此为参数创建Thread线程。</li><li>调用线程的start方法启动，</li><li>通过FutureTsask包装的对象获得返回值。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argo<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 3.创建Callable对象</span>      <span class="token class-name">ThreadCall</span> call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4.使用FutureTask来包装Callable对象</span>      <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 该Thread对象才是真正的线程对象</span>      <span class="token class-name">Thread</span> thread3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 4.调用线程对象的start来启动该线程</span>      thread3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有返回值的线程，返回值为："</span> <span class="token operator">+</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：Call方法可以设置返回值；Callabe接口有泛型限制，可以控制返回值类型。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程架构-第2章深入理解Thread构造函数</title>
      <link href="/2022/10/24/multithreading-and-architecture-ch2/"/>
      <url>/2022/10/24/multithreading-and-architecture-ch2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E7%AC%AC2%E7%AB%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3thread%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">第2章：深入理解Thread构造函数</a><ul><li><a href="#21-%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%91%BD%E5%90%8D">2.1 线程的命名</a></li><li><a href="#22-%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB">2.2 线程的父子关系</a></li><li><a href="#23-thread%E4%B8%8Ethreadgroup">2.3 Thread与ThreadGroup</a></li><li><a href="#24-thread%E5%92%8Crunnable">2.4 Thread和Runnable</a></li><li><a href="#25-thread%E4%B8%8Ejvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">2.5 Thread与JVM虚拟机栈</a><ul><li><a href="#251-stacksize">2.5.1 stackSize</a></li><li><a href="#252-jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84">2.5.2 JVM内存结构</a><ul><li><a href="#2521-%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8">2.5.2.1 程序计数器</a></li><li><a href="#2522-%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">2.5.2.2 虚拟机栈</a></li><li><a href="#2523-%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88">2.5.2.3 本地方法栈</a></li><li><a href="#2524-%E5%A0%86%E5%86%85%E5%AD%98">2.5.2.4 堆内存</a></li><li><a href="#2525-%E6%96%B9%E6%B3%95%E5%8C%BA">2.5.2.5 方法区</a></li><li><a href="#2526-java8%E5%85%83%E7%A9%BA%E9%97%B4">2.5.2.6 Java8元空间</a></li></ul></li><li><a href="#253-thread%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88">2.5.3 Thread与虚拟机栈</a></li></ul></li><li><a href="#26-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8Bdaemon-thread">2.6 守护线程（Daemon Thread）</a><ul><li><a href="#261-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B">2.6.1 守护线程</a></li><li><a href="#262-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BD%9C%E7%94%A8">2.6.2 守护线程的作用</a></li></ul></li><li><a href="#27-%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93">2.7 本章小结</a></li></ul></li></ul><h1 id="第2章：深入理解Thread构造函数"><a href="#第2章：深入理解Thread构造函数" class="headerlink" title="第2章：深入理解Thread构造函数"></a>第2章：深入理解Thread构造函数</h1><h2 id="2-1-线程的命名"><a href="#2-1-线程的命名" class="headerlink" title="2.1 线程的命名"></a>2.1 线程的命名</h2><p>【1】 默认命名</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> threadInitNumber<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> threadInitNumber<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Allocates a new &#123;@code Thread&#125; object. This constructor has the same * effect as &#123;@linkplain #Thread(ThreadGroup,Runnable,String) Thread&#125; * &#123;@code (null, null, gname)&#125;, where &#123;@code gname&#125; is a newly generated * name. Automatically generated names are of the form * &#123;@code "Thread-"+&#125;&lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is an integer. */</span><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Allocates a new &#123;@code Thread&#125; object. This constructor has the same * effect as &#123;@linkplain #Thread(ThreadGroup,Runnable,String) Thread&#125; * &#123;@code (null, target, gname)&#125;, where &#123;@code gname&#125; is a newly generated * name. Automatically generated names are of the form * &#123;@code "Thread-"+&#125;&lt;i>n&lt;/i>, where &lt;i>n&lt;/i> is an integer. * * @param  target *         the object whose &#123;@code run&#125; method is invoked when this thread *         is started. If &#123;@code null&#125;, this classes &#123;@code run&#125; method does *         nothing. */</span><span class="token keyword">public</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token string">"Thread-"</span> <span class="token operator">+</span> <span class="token function">nextThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其命名将为</p><ul><li>Thread-0</li><li>Thread-1</li><li>Thread-2</li><li>…….</li></ul><p>【2】命名线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> target<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">long</span> stackSize<span class="token punctuation">)</span><span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> group<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【3】修改线程的名字</p><p>线程启动前有机会对其修改，但是线程start后便不能修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Changes the name of this thread to be equal to the argument * &lt;code>name&lt;/code>. * &lt;p> * First the &lt;code>checkAccess&lt;/code> method of this thread is called * with no arguments. This may result in throwing a * &lt;code>SecurityException&lt;/code>. * * @param      name   the new name for this thread. * @exception  SecurityException  if the current thread cannot modify this *               thread. * @see        #getName * @see        #checkAccess() */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>threadStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">setNativeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2-线程的父子关系"><a href="#2-2-线程的父子关系" class="headerlink" title="2.2 线程的父子关系"></a>2.2 线程的父子关系</h2><p>所有线程的构造函数都会调用<code>init()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Initializes a Thread. * * @param g the Thread group * @param target the object whose run() method gets called * @param name the name of the new Thread * @param stackSize the desired stack size for the new thread, or *        zero to indicate that this parameter is to be ignored. * @param acc the AccessControlContext to inherit, or *            AccessController.getContext() if null * @param inheritThreadLocals if &#123;@code true&#125;, inherit initial values for *            inheritable thread-locals from the constructing thread */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span> g<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> target<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>                  <span class="token keyword">long</span> stackSize<span class="token punctuation">,</span> <span class="token class-name">AccessControlContext</span> acc<span class="token punctuation">,</span>                  <span class="token keyword">boolean</span> inheritThreadLocals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* Determine if it's an applet or not */</span>        <span class="token comment">/* If there is a security manager, ask the security manager           what to do. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            g <span class="token operator">=</span> security<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* If the security doesn't have a strong opinion of the matter           use the parent thread group. */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            g <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* checkAccess regardless of whether or not threadgroup is       explicitly passed in. */</span>    g<span class="token punctuation">.</span><span class="token function">checkAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Do we have the required permissions?     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCCLOverridden</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            security<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token constant">SUBCLASS_IMPLEMENTATION_PERMISSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    g<span class="token punctuation">.</span><span class="token function">addUnstarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">=</span> g<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">isDaemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">isCCLOverridden</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>contextClassLoader <span class="token operator">=</span> parent<span class="token punctuation">.</span>contextClassLoader<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>inheritedAccessControlContext <span class="token operator">=</span>            acc <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> acc <span class="token operator">:</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token function">setPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inheritThreadLocals <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inheritableThreadLocals <span class="token operator">=</span>            <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">createInheritedMap</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>inheritableThreadLocals<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* Stash the specified stack size in case the VM cares */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stackSize <span class="token operator">=</span> stackSize<span class="token punctuation">;</span>    <span class="token comment">/* Set thread ID */</span>    tid <span class="token operator">=</span> <span class="token function">nextThreadID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> parent <span class="token operator">=</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代表获取当前线程作为创建线程的父线程</p><ul><li>一个线程的创建由另一个线程完成</li><li>被创建线程的父线程是创建它的线程</li></ul><p>其中main函数是JVM创建，也就意味着前面创建的所有线程其父线程都是main线程。</p><h2 id="2-3-Thread与ThreadGroup"><a href="#2-3-Thread与ThreadGroup" class="headerlink" title="2.3 Thread与ThreadGroup"></a>2.3 Thread与ThreadGroup</h2><p>init()源码中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityManager</span> security <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* Determine if it's an applet or not */</span>            <span class="token comment">/* If there is a security manager, ask the security manager               what to do. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>security <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                g <span class="token operator">=</span> security<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">/* If the security doesn't have a strong opinion of the matter               use the parent thread group. */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>g <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                g <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构造函数中，可以显式地指定线程的Group，也就是ThreadGroup。如果在构造Thread的时候没有显式地指定线程的Group，那么子线程将会被加入父线程所在的线程组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>chapter02</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadConstruction</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadGroup</span><span class="token punctuation">(</span><span class="token string">"testGroup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ThreadGroup</span> threadGroup <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main Thread belong to:"</span> <span class="token operator">+</span> threadGroup<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 belong to "</span><span class="token operator">+</span>t1<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 belong to "</span><span class="token operator">+</span>t2<span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果为</p><pre class="line-numbers language-none"><code class="language-none">Main Thread belong to:maint1 belong to maint2 belong to testGroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以的出结论</p><ul><li>main线程所在的ThreadGroup为main</li><li>构造一个线程如果没有显式指定ThreadGroup那么它将会和父线程属于同一个ThreadGroup</li></ul><p>在默认设置中，子线程和父线程属于同一个Group外，它还会和父线程拥有同样的优先级，同样的daemon</p><h2 id="2-4-Thread和Runnable"><a href="#2-4-Thread和Runnable" class="headerlink" title="2.4 Thread和Runnable"></a>2.4 Thread和Runnable</h2><p>Thread负责线程本身相关的控制，而Runnable负责逻辑执行单元部分。</p><h2 id="2-5-Thread与JVM虚拟机栈"><a href="#2-5-Thread与JVM虚拟机栈" class="headerlink" title="2.5 Thread与JVM虚拟机栈"></a>2.5 Thread与JVM虚拟机栈</h2><h3 id="2-5-1-stackSize"><a href="#2-5-1-stackSize" class="headerlink" title="2.5.1 stackSize"></a>2.5.1 stackSize</h3><blockquote><p><a href="https://docs.oracle.com/javase/8/docs/api/?xd_co_f=47c934d9-e663-4eba-819c-b726fc2d0847">https://docs.oracle.com/javase/8/docs/api/?xd_co_f=47c934d9-e663-4eba-819c-b726fc2d0847</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">public Thread(ThreadGroup group,              Runnable target,              String name,              long stackSize)Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group, and has the specified stack size.This constructor is identical to Thread(ThreadGroup,Runnable,String) with the exception of the fact that it allows the thread stack size to be specified. The stack size is the approximate number of bytes of address space that the virtual machine is to allocate for this thread&#39;s stack. The effect of the stackSize parameter, if any, is highly platform dependent.On some platforms, specifying a higher value for the stackSize parameter may allow a thread to achieve greater recursion depth before throwing a StackOverflowError. Similarly, specifying a lower value may allow a greater number of threads to exist concurrently without throwing an OutOfMemoryError (or other internal error). The details of the relationship between the value of the stackSize parameter and the maximum recursion depth and concurrency level are platform-dependent. On some platforms, the value of the stackSize parameter may have no effect whatsoever.The virtual machine is free to treat the stackSize parameter as a suggestion. If the specified value is unreasonably low for the platform, the virtual machine may instead use some platform-specific minimum value; if the specified value is unreasonably high, the virtual machine may instead use some platform-specific maximum. Likewise, the virtual machine is free to round the specified value up or down as it sees fit (or to ignore it completely).Specifying a value of zero for the stackSize parameter will cause this constructor to behave exactly like the Thread(ThreadGroup, Runnable, String) constructor.Due to the platform-dependent nature of the behavior of this constructor, extreme care should be exercised in its use. The thread stack size necessary to perform a given computation will likely vary from one JRE implementation to another. In light of this variation, careful tuning of the stack size parameter may be required, and the tuning may need to be repeated for each JRE implementation on which an application is to run.Implementation note: Java platform implementers are encouraged to document their implementation&#39;s behavior with respect to the stackSize parameter.Parameters:group - the thread group. If null and there is a security manager, the group is determined by SecurityManager.getThreadGroup(). If there is not a security manager or SecurityManager.getThreadGroup() returns null, the group is set to the current thread&#39;s thread group.target - the object whose run method is invoked when this thread is started. If null, this thread&#39;s run method is invoked.name - the name of the new threadstackSize - the desired stack size for the new thread, or zero to indicate that this parameter is to be ignored.Throws:SecurityException - if the current thread cannot create a thread in the specified thread groupSince:1.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">分配一个新的Thread对象，使其以target作为其运行对象，以指定的名称作为其名称，并属于组引用的线程组，并具有指定的堆栈大小。此构造函数与Thread（ThreadGroup、Runnable、String）相同，只是它允许指定线程堆栈大小。堆栈大小是虚拟机将为此线程的堆栈分配的地址空间的大致字节数。stackSize参数的效果（如果有）高度依赖于平台。在某些平台上，为stackSize参数指定一个更大的值可能允许线程在抛出StackOverflowError之前获得更大的递归深度。类似地，指定一个较低的值可以允许更多线程同时存在，而不会引发OutOfMemoryError（或其他内部错误）。stackSize参数值与最大递归深度和并发级别之间关系的详细信息取决于平台。在某些平台上，stackSize参数的值可能没有任何影响。虚拟机可以自由地将stackSize参数视为建议。如果平台的指定值不合理地低，则虚拟机可以改为使用特定于平台的最小值；如果指定的值不合理地高，则虚拟机可以改为使用特定于平台的最大值。同样，虚拟机可以自由地将指定的值向上或向下舍入（或完全忽略它）。为stackSize参数指定一个零值将导致此构造函数的行为与Thread（ThreadGroup，Runnable，String）构造函数完全相同。由于此构造函数的行为依赖于平台，因此在使用时应格外小心。执行给定计算所需的线程堆栈大小可能因JRE实现而异。考虑到这种变化，可能需要仔细调整堆栈大小参数，并且可能需要对运行应用程序的每个JRE实现重复调整。实现注意：鼓励Java平台实现者记录其实现关于stackSize参数的行为。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说：</p><ul><li><p>如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出StackOverflowError异常</p></li><li><p>如果Java虚拟机可以动态扩展，并且在扩展的时候无法申请到足够的内存或者在创建新线程时没有足够的内存取创建对应的虚拟机栈，那么Java虚拟机将会抛出OutOfMemoryError</p></li></ul><h3 id="2-5-2-JVM内存结构"><a href="#2-5-2-JVM内存结构" class="headerlink" title="2.5.2 JVM内存结构"></a>2.5.2 JVM内存结构</h3><blockquote><p><a href="https://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf">https://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf</a></p></blockquote><p><img src="/./multithreading-and-architecture/image1.png"></p><h4 id="2-5-2-1-程序计数器"><a href="#2-5-2-1-程序计数器" class="headerlink" title="2.5.2.1 程序计数器"></a>2.5.2.1 程序计数器</h4><p>  程序计数器（Program Counter Register）是一块较小的内存空间，它可以看做是当前线程锁执行的字节码的行号指示器。字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复都需要依赖这个指示器。</p><p>  由于多线程是通过通过轮询、分配时间片的方法来实现，因此一个内核只会执行一条线程中的指令，为了线程切换后PC能够正确恢复到正确的位置，每个线程都需要有一个独立的程序计数器，各条线程之间PC互不影响，独立存储，这类内存区域是“<strong>私有</strong>”的内存。</p><h4 id="2-5-2-2-虚拟机栈"><a href="#2-5-2-2-虚拟机栈" class="headerlink" title="2.5.2.2 虚拟机栈"></a>2.5.2.2 虚拟机栈</h4><p>与程序计数器一样， Java虚拟机栈（Java Virtual Machine Stack） 也是线程<strong>私有的</strong>， 它的生命周期<br>与线程相同。 虚拟机栈描述的是Java方法执行的线程内存模型： 每个方法被执行的时候， Java虚拟机都<br>会同步创建一个栈帧（Stack Frame） 用于存储局部变量表、 操作数栈、 动态连接、 方法出口等信<br>息。 每一个方法被调用直至执行完毕的过程， 就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p><img src="/./multithreading-and-architecture/image2.png"></p><p>其中虚拟机栈的大小可以通过<code>-Xss</code>配置。<br>局部变量表存放了编译期可知的各种Java虚拟机基本数据类型（boolean、 byte、 char、 short、 int、<br>float、 long、 double） 、 对象引用（reference类型， 它并不等同于对象本身， 可能是一个指向对象起始<br>地址的引用指针， 也可能是指向一个代表对象的句柄或者其他与此对象相关的位置） 和returnAddress<br>类型（指向了一条字节码指令的地址） 。</p><p>这些数据类型在局部变量表中的存储空间以局部变量槽（Slot） 来表示， 其中64位长度的long和<br>double类型的数据会占用两个变量槽， 其余的数据类型只占用一个。 局部变量表所需的内存空间在编<br>译期间完成分配， 当进入一个方法时， 这个方法需要在栈帧中分配多大的局部变量空间是完全确定<br>的， 在方法运行期间不会改变局部变量表的大小。 请读者注意， 这里说的“大小”是指变量槽的数量，<br>虚拟机真正使用多大的内存空间（譬如按照1个变量槽占用32个比特、 64个比特， 或者更多） 来实现一<br>个变量槽， 这是完全由具体的虚拟机实现自行决定的事情。</p><p>在《Java虚拟机规范》 中， 对这个内存区域规定了两类异常状况： 如果线程请求的栈深度大于虚<br>拟机所允许的深度， 将抛出StackOverflowError异常； 如果Java虚拟机栈容量可以动态扩展， 当栈扩<br>展时无法申请到足够的内存会抛出OutOfMemoryError异常。</p><h4 id="2-5-2-3-本地方法栈"><a href="#2-5-2-3-本地方法栈" class="headerlink" title="2.5.2.3 本地方法栈"></a>2.5.2.3 本地方法栈</h4><p>本地方法栈（Native Method Stacks） 与虚拟机栈所发挥的作用是非常相似的， 其区别只是虚拟机<br>栈为虚拟机执行Java方法（也就是字节码） 服务， 而本地方法栈则是为虚拟机使用到的本地（Native）<br>方法服务。</p><p>Java中提供了调用本地方法的接口(Java Native Interface)，也就是C&#x2F;C++程序，在线程的执行过程中，会碰到调用JNI方法的情况，如网络通信、文件操作的底层，String的intern等都是JNI方法，这块也是线程<strong>私有</strong>的内存区域。</p><p>《Java虚拟机规范》 对本地方法栈中方法使用的语言、 使用方式与数据结构并没有任何强制规<br>定， 因此具体的虚拟机可以根据需要自由实现它， 甚至有的Java虚拟机（譬如Hot-Spot虚拟机） 直接<br>就把本地方法栈和虚拟机栈合二为一。 与虚拟机栈一样， 本地方法栈也会在栈深度溢出或者栈扩展失<br>败时分别抛出StackOverflowError和OutOfMemoryError异常。</p><h4 id="2-5-2-4-堆内存"><a href="#2-5-2-4-堆内存" class="headerlink" title="2.5.2.4 堆内存"></a>2.5.2.4 堆内存</h4><p>Java中最大的内存，被所有线程<strong>共享</strong>，在虚拟机启动时创建。几乎所有的对象实例以及数组都应当在堆上分配。</p><p><img src="/./multithreading-and-architecture/image3.png"></p><ul><li>java7之前内存逻辑划分为 <strong>新生代 + 养老区 + 永久区</strong></li><li>java8之后内存逻辑划分为 <strong>新生代 + 养老区 + 元空间</strong></li><li>新生代也可以叫年轻代，它又分为Eden区和survivor区，其中survivor区又分为 survivor0区和survivor1区 或者 From区和To区</li><li>实际上不管永久代与元空间其实都是指方法区中对于长期存在的常量对象的保存.</li></ul><p>根据《Java虚拟机规范》 的规定， Java堆可以处于物理上不连续的内存空间中， 但在逻辑上它应该<br>被视为连续的， 这点就像我们用磁盘空间去存储文件一样， 并不要求每个文件都连续存放。 但对于大<br>对象（典型的如数组对象） ， 多数虚拟机实现出于实现简单、 存储高效的考虑， 很可能会要求连续的<br>内存空间。</p><p>Java堆既可以被实现成固定大小的， 也可以是可扩展的， 不过当前主流的Java虚拟机都是按照可扩<br>展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定） 。 如果在Java堆中没有内存完成实例分配， 并且堆也无法再<br>扩展时， Java虚拟机将会抛出<code>OutOfMemoryError</code>异常。</p><h4 id="2-5-2-5-方法区"><a href="#2-5-2-5-方法区" class="headerlink" title="2.5.2.5 方法区"></a>2.5.2.5 方法区</h4><p>方法区（Method Area） 与Java堆一样， 是各个线程<strong>共享</strong>的内存区域， 它用于存储已被虚拟机加载<br>的类型信息、 常量、 静态变量、 即时编译器编译后的代码缓存等数据。 虽然《Java虚拟机规范》 中把<br>方法区描述为堆的一个逻辑部分， 但是它却有一个别名叫作“非堆”（Non-Heap），目的是与Java堆区<br>分开来。</p><h4 id="2-5-2-6-Java8元空间"><a href="#2-5-2-6-Java8元空间" class="headerlink" title="2.5.2.6 Java8元空间"></a>2.5.2.6 Java8元空间</h4><p>取代了Java8以前的永久代内存区域，元空间是堆内存的一部分，JVM为每个类加载器分配一块内存块列表，进行线性分配，块的大小取决于类加载器的类型，sun&#x2F;反射&#x2F;代理的类加载器块会小一些，之前的版本会单独卸载回收某个类，现在是GC过程中发现某个类加载器已经具备回收的条件，则会将整个类加载器相关的元空间全部回收，减少内存碎片，节省GC扫描和压缩时间。</p><h3 id="2-5-3-Thread与虚拟机栈"><a href="#2-5-3-Thread与虚拟机栈" class="headerlink" title="2.5.3 Thread与虚拟机栈"></a>2.5.3 Thread与虚拟机栈</h3><p>虚拟机栈是每个线程私有的，但是堆是共享的，因此一个Java进程的内存大小可以粗略的认为是：</p><p>$$堆内存+线程数量*栈内存$$</p><p>因为一个操作系统所允许的最大进程内存的大小是有限的，因此堆内存不变，栈内存越大，可创建的线程数量越小。栈内存大小不变，堆内存越大，可创建的线程数量越少。</p><p>其中线程的计算公式为：<br>$$线程数量&#x3D;\frac{(最大地址空间-JVM堆内存-ReservedOsMemory)}{XSS}$$</p><p>其中$ReservedOsMemory$大小为系统保留内存，一般在136MB左右</p><h2 id="2-6-守护线程（Daemon-Thread）"><a href="#2-6-守护线程（Daemon-Thread）" class="headerlink" title="2.6 守护线程（Daemon Thread）"></a>2.6 守护线程（Daemon Thread）</h2><h3 id="2-6-1-守护线程"><a href="#2-6-1-守护线程" class="headerlink" title="2.6.1 守护线程"></a>2.6.1 守护线程</h3><p>守护线程一般用于处理一些后台的工作，比如JDK的垃圾回收线程。</p><p>JVM程序在正常情况下，如果没有一个非守护线程，也就是全都是守护线程，则JVM的进程会退出。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>chapter02</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DaemonThread</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//thread.setDaemon(true);</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2_000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Main thread finished!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码虽然Main线程已经结束生命周期，但是仍有线程是非守护线程，此时JVM进程不会结束。</p><p>当thread设置为守护线程时，即去除注释后，进程会正常结束。</p><p>因此说明了，主线程结束，子线程不一定会结束。同时，子线程和父线程的Daemon属性相同，如果父线程是守护线程则子线程也是守护线程，反之亦然。另外，setDaemon方法只能在线程未启动之前才生效，如果在线程启动中，会抛出IllegalThreadStateException异常。</p><h3 id="2-6-2-守护线程的作用"><a href="#2-6-2-守护线程的作用" class="headerlink" title="2.6.2 守护线程的作用"></a>2.6.2 守护线程的作用</h3><p>如果JVM进程中没有一个非守护线程，那么JVM会退出，也就是说守护线程具备自动结束生命周期的特性，而非守护线程不具备这个特点。如果垃圾回收线程是非守护线程，那么当main线程结束后，JVM无法退出。</p><p>守护线程经常用作与执行一些后台任务，因此它也被称为后台线程，当希望关闭某些线程时候或者退出JVM进程的时候，一些线程能够自动关闭，此时就需要使用守护线程。</p><h2 id="2-7-本章小结"><a href="#2-7-本章小结" class="headerlink" title="2.7 本章小结"></a>2.7 本章小结</h2><p>本章介绍了Thread的构造函数，介绍了stackSize对Thread的影响，除此之外也介绍了线程的父子关系，守护线程、优先级、ThreadGroup等特性。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>high_performance_MySQL</title>
      <link href="/2022/10/20/high-performance-MySQL/"/>
      <url>/2022/10/20/high-performance-MySQL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JMH1</title>
      <link href="/2022/10/19/JMH1/"/>
      <url>/2022/10/19/JMH1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#14%E7%BC%96%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">1.4编写正确的微基准测试以及高级用法</a><ul><li><a href="#141-%E7%BC%96%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B">1.4.1 编写正确的微基准测试用例</a></li><li><a href="#142-%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">1.4.2 高级用法</a></li></ul></li><li><a href="#15jmh%E7%9A%84profiler">1.5JMH的Profiler</a><ul><li><a href="#151-stackprofiler">1.5.1 StackProfiler</a></li><li><a href="#152-gcprofiler">1.5.2 GcProfiler</a></li><li><a href="#153-classloaderprofiler">1.5.3 ClassLoaderProfiler</a></li><li><a href="#154-compilerprofiler">1.5.4 CompilerProfiler</a></li></ul></li><li><a href="#16%E6%9C%AC%E7%AB%A0%E6%80%BB%E7%BB%93">1.6本章总结</a></li></ul><h2 id="1-4编写正确的微基准测试以及高级用法"><a href="#1-4编写正确的微基准测试以及高级用法" class="headerlink" title="1.4编写正确的微基准测试以及高级用法"></a>1.4编写正确的微基准测试以及高级用法</h2><h3 id="1-4-1-编写正确的微基准测试用例"><a href="#1-4-1-编写正确的微基准测试用例" class="headerlink" title="1.4.1 编写正确的微基准测试用例"></a>1.4.1 编写正确的微基准测试用例</h3><p>【1】避免DCE(Dead Code Elimination)</p><p><strong>Dead Code Elimination 是JVM擦去了一些上下文无关或者计算不会用到的代码片段</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JVM优化中，该test方法可能会被当做一个空方法看待。</p><p>【2】使用Blackhole<br>Blackhole可以允许无返回值的函数不进行DC（Dead Code）。</p><p>用法如下示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>infra<span class="token punctuation">.</span></span><span class="token class-name">Blackhole</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample14</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x1 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x2 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">powButReturnOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//DC，会被擦除</span>        <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不会被擦除，有返回值</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">powThenAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useBlackhole</span><span class="token punctuation">(</span><span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample14</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：使用blackhole需要占用一定资源，因此在无返回值的基准测试方法中针对局部变量的使用都统一通过blackhole进行consume，那么久可以确保同样的基准执行条件。</p><p>Blackhole可以帮助你在无返回值的基准测试中避免DC情况。</p><h3 id="1-4-2-高级用法"><a href="#1-4-2-高级用法" class="headerlink" title="1.4.2 高级用法"></a>1.4.2 高级用法</h3><h2 id="1-5JMH的Profiler"><a href="#1-5JMH的Profiler" class="headerlink" title="1.5JMH的Profiler"></a>1.5JMH的Profiler</h2><h3 id="1-5-1-StackProfiler"><a href="#1-5-1-StackProfiler" class="headerlink" title="1.5.1 StackProfiler"></a>1.5.1 StackProfiler</h3><h3 id="1-5-2-GcProfiler"><a href="#1-5-2-GcProfiler" class="headerlink" title="1.5.2 GcProfiler"></a>1.5.2 GcProfiler</h3><h3 id="1-5-3-ClassLoaderProfiler"><a href="#1-5-3-ClassLoaderProfiler" class="headerlink" title="1.5.3 ClassLoaderProfiler"></a>1.5.3 ClassLoaderProfiler</h3><h3 id="1-5-4-CompilerProfilerE"><a href="#1-5-4-CompilerProfilerE" class="headerlink" title="1.5.4 CompilerProfilerE"></a>1.5.4 CompilerProfilerE</h3><h2 id="1-6本章总结"><a href="#1-6本章总结" class="headerlink" title="1.6本章总结"></a>1.6本章总结</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA高并发笔记之JMH(上)</title>
      <link href="/2022/10/14/JMH0/"/>
      <url>/2022/10/14/JMH0/</url>
      
        <content type="html"><![CDATA[<h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><ul><li><a href="#jmh">JMH</a><ul><li><a href="#1jmh%E7%AE%80%E4%BB%8B">1.JMH简介</a></li><li><a href="#12-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">1.2 快速入门</a><ul><li><a href="#121-main%E6%96%B9%E6%B3%95%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%8D%E4%B8%A5%E8%B0%A8">1.2.1 main方法的测试（不严谨）</a></li><li><a href="#122-jmh%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">1.2.2 JMH方法进行基准测试</a></li></ul></li><li><a href="#13-jmh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">1.3 JMH基本用法</a><ul><li><a href="#131-benchmark%E6%A0%87%E8%AE%B0%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95">1.3.1 @Benchmark标记基准测试方法</a></li><li><a href="#132-warmup%E4%BB%A5%E5%8F%8Ameasurement">1.3.2 Warmup以及Measurement</a></li><li><a href="#133-%E5%9B%9B%E7%A7%8Dbenchmarkmode">1.3.3 四种BenchmarkMode</a></li><li><a href="#134-outputtimeunit">1.3.4 OutputTimeUnit</a></li><li><a href="#135%E4%B8%89%E5%A4%A7state%E7%9A%84%E4%BD%BF%E7%94%A8">1.3.5三大State的使用</a></li><li><a href="#136%E4%BD%BF%E7%94%A8param">1.3.6使用@Param</a></li><li><a href="#137-jmh%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6fixture">1.3.7 JMH测试套件(Fixture)</a></li><li><a href="#138-compilercontrol">1.3.8 CompilerControl</a></li></ul></li></ul></li></ul><h2 id="1-JMH简介"><a href="#1-JMH简介" class="headerlink" title="1.JMH简介"></a>1.JMH简介</h2><p>JMH是Java Micro Benchmark Harness的简写，是用于代码微基准测试的工具集。<br>JMH的官网地址:<a href="http://openjdk.java.net/projects/code-tools/jmh/">http://openjdk.java.net/projects/code-tools/jmh/</a></p><h2 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h2><h3 id="1-2-1-main方法的测试（不严谨）"><a href="#1-2-1-main方法的测试（不严谨）" class="headerlink" title="1.2.1 main方法的测试（不严谨）"></a>1.2.1 main方法的测试（不严谨）</h3><p>测试ArrayList和LinkedList的写入10000000次字符串，使用add方法调用，重复执行10次，比较最大值、最小值、平均值（此处忽略了内存开销）。<br></p><p>使用前添加maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>31.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayVSLinked</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">"DUMMY DATA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10_000_000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_ITERATIONS</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_CAPACITY</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayListPerfTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> iterations<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">linkedListPerfTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> iterations<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">arrayListPerfTest</span><span class="token punctuation">(</span><span class="token constant">MAX_ITERATIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">linkedListPerfTest</span><span class="token punctuation">(</span><span class="token constant">MAX_ITERATIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为<br></p><table><thead><tr><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>105</td><td>1073</td></tr><tr><td>90</td><td>32</td></tr><tr><td>114</td><td>67</td></tr><tr><td>69</td><td>425</td></tr><tr><td>90</td><td>33</td></tr><tr><td>103</td><td>31</td></tr><tr><td>32</td><td>1322</td></tr><tr><td>68</td><td>31</td></tr><tr><td>99</td><td>31</td></tr><tr><td>31</td><td>1556</td></tr></tbody></table><p>折线图为：<br><img src="/./JMH/image1.png"><br>ArrayList的性能看起来好于LinkedList，事实上ArrayList的随机读写性能好于LinkedList，但是LinkedList是链表结构设计，其delete性能会好于ArrayList。<br>存在的问题：</p><ol><li>Stopwatch进行计算，会导致CPU时间浪费</li><li>JVM可能会对运行时优化，如循环展开、运行时编译</li><li>两个方法的运行环境不公平，第一个方法结束后JVM可能已经惊醒了profiler优化或者内存未被释放。</li></ol><h3 id="1-2-2-JMH方法进行基准测试"><a href="#1-2-2-JMH方法进行基准测试" class="headerlink" title="1.2.2 JMH方法进行基准测试"></a>1.2.2 JMH方法进行基准测试</h3><p>在maven中添加依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">"DUMMY DATA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linkedList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">arrayListAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">linkedListAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> linkedList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> opts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># JMH version: 1.35</span><span class="token comment"># VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span><span class="token comment"># VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span><span class="token comment"># VM options: -Dvisualvm.id=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span><span class="token comment"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span><span class="token comment"># Warmup: 10 iterations, 10 s each</span><span class="token comment"># Measurement: 10 iterations, 10 s each</span><span class="token comment"># Timeout: 10 min per iteration</span><span class="token comment"># Threads: 1 thread, will synchronize iterations</span><span class="token comment"># Benchmark mode: Average time, time/op</span><span class="token comment"># Benchmark: concurrent.jmh.JMHExample01.arrayListAdd</span><span class="token comment"># Run progress: 0.00% complete, ETA 00:06:40</span><span class="token comment"># Fork: 1 of 1</span><span class="token comment"># Warmup Iteration   1: 0.026 us/op</span><span class="token comment"># Warmup Iteration   2: 0.027 us/op</span><span class="token comment"># Warmup Iteration   3: 0.040 us/op</span><span class="token comment"># Warmup Iteration   4: 0.040 us/op</span><span class="token comment"># Warmup Iteration   5: 0.026 us/op</span><span class="token comment"># Warmup Iteration   6: 0.037 us/op</span><span class="token comment"># Warmup Iteration   7: 0.040 us/op</span><span class="token comment"># Warmup Iteration   8: 0.049 us/op</span><span class="token comment"># Warmup Iteration   9: 0.040 us/op</span><span class="token comment"># Warmup Iteration  10: 0.040 us/op</span>Iteration   <span class="token number">1</span>: <span class="token number">0.040</span> us/opIteration   <span class="token number">2</span>: <span class="token number">0.027</span> us/opIteration   <span class="token number">3</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">4</span>: <span class="token number">0.026</span> us/opIteration   <span class="token number">5</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">6</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">7</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">8</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">9</span>: <span class="token number">0.025</span> us/opIteration  <span class="token number">10</span>: <span class="token number">0.037</span> us/opResult <span class="token string">"concurrent.jmh.JMHExample01.arrayListAdd"</span><span class="token builtin class-name">:</span>  <span class="token number">0.028</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span> <span class="token number">0.009</span> us/op <span class="token punctuation">[</span>Average<span class="token punctuation">]</span>  <span class="token punctuation">(</span>min, avg, max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.025</span>, <span class="token number">0.028</span>, <span class="token number">0.040</span><span class="token punctuation">)</span>, stdev <span class="token operator">=</span> <span class="token number">0.006</span>  CI <span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span>: <span class="token punctuation">[</span><span class="token number">0.019</span>, <span class="token number">0.037</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span><span class="token comment"># JMH version: 1.35</span><span class="token comment"># VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span><span class="token comment"># VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span><span class="token comment"># VM options: -Dvisualvm.id=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span><span class="token comment"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span><span class="token comment"># Warmup: 10 iterations, 10 s each</span><span class="token comment"># Measurement: 10 iterations, 10 s each</span><span class="token comment"># Timeout: 10 min per iteration</span><span class="token comment"># Threads: 1 thread, will synchronize iterations</span><span class="token comment"># Benchmark mode: Average time, time/op</span><span class="token comment"># Benchmark: concurrent.jmh.JMHExample01.linkedListAdd</span><span class="token comment"># Run progress: 50.00% complete, ETA 00:03:21</span><span class="token comment"># Fork: 1 of 1</span><span class="token comment"># Warmup Iteration   1: 0.027 us/op</span><span class="token comment"># Warmup Iteration   2: 0.038 us/op</span><span class="token comment"># Warmup Iteration   3: 0.039 us/op</span><span class="token comment"># Warmup Iteration   4: 0.028 us/op</span><span class="token comment"># Warmup Iteration   5: 0.031 us/op</span><span class="token comment"># Warmup Iteration   6: 0.037 us/op</span><span class="token comment"># Warmup Iteration   7: 0.037 us/op</span><span class="token comment"># Warmup Iteration   8: 0.038 us/op</span><span class="token comment"># Warmup Iteration   9: 0.038 us/op</span><span class="token comment"># Warmup Iteration  10: 0.038 us/op</span>Iteration   <span class="token number">1</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">2</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">3</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">4</span>: <span class="token number">0.041</span> us/opIteration   <span class="token number">5</span>: <span class="token number">0.040</span> us/opIteration   <span class="token number">6</span>: <span class="token number">0.046</span> us/opIteration   <span class="token number">7</span>: <span class="token number">0.038</span> us/opIteration   <span class="token number">8</span>: <span class="token number">0.038</span> us/opIteration   <span class="token number">9</span>: <span class="token number">0.038</span> us/opIteration  <span class="token number">10</span>: <span class="token number">0.038</span> us/opResult <span class="token string">"concurrent.jmh.JMHExample01.linkedListAdd"</span><span class="token builtin class-name">:</span>  <span class="token number">0.040</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span> <span class="token number">0.004</span> us/op <span class="token punctuation">[</span>Average<span class="token punctuation">]</span>  <span class="token punctuation">(</span>min, avg, max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.038</span>, <span class="token number">0.040</span>, <span class="token number">0.046</span><span class="token punctuation">)</span>, stdev <span class="token operator">=</span> <span class="token number">0.003</span>  CI <span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span>: <span class="token punctuation">[</span><span class="token number">0.036</span>, <span class="token number">0.044</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span><span class="token comment"># Run complete. Total time: 00:06:42</span>REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up onwhy the numbers are the way they are. Use profilers <span class="token punctuation">(</span>see -prof, -lprof<span class="token punctuation">)</span>, design factorialexperiments, perform baseline and negative tests that provide experimental control, <span class="token function">make</span> surethe benchmarking environment is safe on JVM/OS/HW level, ask <span class="token keyword">for</span> reviews from the domain experts.Do not assume the numbers tell you what you want them to tell.Benchmark                   Mode  Cnt  Score   Error  UnitsJMHExample01.arrayListAdd   avgt   <span class="token number">10</span>  <span class="token number">0.028</span> ± <span class="token number">0.009</span>  us/opJMHExample01.linkedListAdd  avgt   <span class="token number">10</span>  <span class="token number">0.040</span> ± <span class="token number">0.004</span>  us/opProcess finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-JMH基本用法"><a href="#1-3-JMH基本用法" class="headerlink" title="1.3 JMH基本用法"></a>1.3 JMH基本用法</h2><h3 id="1-3-1-Benchmark标记基准测试方法"><a href="#1-3-1-Benchmark标记基准测试方法" class="headerlink" title="1.3.1 @Benchmark标记基准测试方法"></a>1.3.1 @Benchmark标记基准测试方法</h3><p>被测试的方法需要被标注为@Benchmark<br>否则会被视为普通方法，不会对其进行测试<br>如果一个类中无任何基准测试方法，那么会抛出异常。</p><h3 id="1-3-2-Warmup以及Measurement"><a href="#1-3-2-Warmup以及Measurement" class="headerlink" title="1.3.2 Warmup以及Measurement"></a>1.3.2 Warmup以及Measurement</h3><p>（1）设置全局Warmup和Measurement<br><br>【1】构造options时设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Options</span> opts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//度量10次，只有这10次对基准方法的调用将会计入统计</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//在度量前，进行10个批次热身，确保代码经过JVM优化</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】使用注解设置@Measurement和Warmup</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iteration<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//度量5个批次</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iteration<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//预热3个批次</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在基准测试方法上设置Warmup和Measurement</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample03</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample03</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中test()方法执行了2个批次预热和5个批次度量，test2()方法执行了10个批次度量和5个批次预热，方法上的注解会覆盖掉全局的注解。<br></p><hr><p>test()方法</p><pre class="line-numbers language-none"><code class="language-none"># Warmup: 2 iterations, 10 s each# Measurement: 5 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time&#x2F;op# Benchmark: concurrent.jmh.JMHExample03.test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>test2()方法</p><pre class="line-numbers language-none"><code class="language-none"># Warmup: 5 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time&#x2F;op# Benchmark: concurrent.jmh.JMHExample03.test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）相关的输出解释</p><pre class="line-numbers language-none"><code class="language-none"># JMH版本# JMH version: 1.35# JDK版本信息# VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09# JAVA命令目录# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe# JVM参数# VM options: -Dvisualvm.id&#x3D;343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar&#x3D;58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding&#x3D;UTF-8# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect&#x3D;false to disable)# 热身批次为10，每一个批次调用测试方法，每个批次执行时间10s# Warmup: 10 iterations, 10 s each# 真正度量批次为10，每个度量的执行时间为10s# Measurement: 10 iterations, 10 s each# 每个批次的超时时间# Timeout: 10 min per iteration# 基准测试线程数# Threads: 1 thread, will synchronize iterations# Benchmark的模式，AverageTime表示调用一次耗费的单位时间（time&#x2F;op）# Benchmark mode: Average time, time&#x2F;op# Benchmark方法的路径# Benchmark: concurrent.jmh.JMHExample01.linkedListAdd# 执行进度# Run progress: 50.00% complete, ETA 00:03:21# Fork: 1 of 1# 10个批次热身，每个批次的调用方法的平均耗时# Warmup Iteration   1: 0.027 us&#x2F;op# Warmup Iteration   2: 0.038 us&#x2F;op# Warmup Iteration   3: 0.039 us&#x2F;op# Warmup Iteration   4: 0.028 us&#x2F;op# Warmup Iteration   5: 0.031 us&#x2F;op# Warmup Iteration   6: 0.037 us&#x2F;op# Warmup Iteration   7: 0.037 us&#x2F;op# Warmup Iteration   8: 0.038 us&#x2F;op# Warmup Iteration   9: 0.038 us&#x2F;op# Warmup Iteration  10: 0.038 us&#x2F;op# 5个批次的度量Iteration   1: 0.039 us&#x2F;opIteration   2: 0.039 us&#x2F;opIteration   3: 0.039 us&#x2F;opIteration   4: 0.041 us&#x2F;opIteration   5: 0.040 us&#x2F;opIteration   6: 0.046 us&#x2F;opIteration   7: 0.038 us&#x2F;opIteration   8: 0.038 us&#x2F;opIteration   9: 0.038 us&#x2F;opIteration  10: 0.038 us&#x2F;op# 最终结果Result &quot;concurrent.jmh.JMHExample01.linkedListAdd&quot;:  0.040 ±(99.9%) 0.004 us&#x2F;op [Average]  # 最小，平均，最大和标准误差  (min, avg, max) &#x3D; (0.038, 0.040, 0.046), stdev &#x3D; 0.003  CI (99.9%): [0.036, 0.044] (assumes normal distribution)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-四种BenchmarkMode"><a href="#1-3-3-四种BenchmarkMode" class="headerlink" title="1.3.3 四种BenchmarkMode"></a>1.3.3 四种BenchmarkMode</h3><p>1.AverageTime（平均响应时间）输出基准测试方法没调用一次的耗时</p><p> 2.Throughput（方法吞吐量）与AverageTime相反，表示单位时间内对该方法调用的次数 </p><p> 3.SampleTime（时间采样）采用抽样方式来统计方法的性能结果。</p><p> 4.SingleShotTime(冷测试)不管是Warmup还是Measurement，每一个批次中基准测试方法只会被执行一次，一般来说，Warmup为0.<P> 5.多Mode以及All，除了设置单个BechmarkMode之外，可以设置多个Mode或者All<br>@BenchmarkMode(Mode.AverageTime,Mode.Throughput)和@BenchmarkMode(Mode.All)</p>注：Options的参数会覆盖方法的注解，方法的注解会覆盖class上的注解<h3 id="1-3-4-OutputTimeUnit"><a href="#1-3-4-OutputTimeUnit" class="headerlink" title="1.3.4 OutputTimeUnit"></a>1.3.4 OutputTimeUnit</h3><p>提供了统计结果输出时的单位，比如调用一次该方法将会耗费多少单位时间，或者单位时间内对该方法进行多少次调用。<br>OutputTimeUnit既可以设置在class上，也可以设置在method上，还可以在Options中设置，覆盖次序与Benchmark一致。</p><h3 id="1-3-5三大State的使用"><a href="#1-3-5三大State的使用" class="headerlink" title="1.3.5三大State的使用"></a>1.3.5三大State的使用</h3><p>三大State分别对应于Scope的三个枚举值</p><ul><li>Benchmark</li><li>Thread</li><li>Group</li></ul><p>【1】Thread独享的State[@State(Scope.Thread)]<br>线程独享的State指的是，每一个运行基准测试方法的线程都会持有一个独立的对象实例，该实例既可以作为基准测试方法传入，也可能是class的注解将State设置为Scope.Thread，一般主要针对非线程安全的类。例如AarrayList和LinkedList。</p><p>【2】Thread共享的State[@State(Scope.Benchmark)]<br>有时候需要测试多线程情况下，梅格雷被不同线程操作的性能，比如，多线程访问某个共享数据，需要让多线程使用同一个实例。因此<br>将State设置为Scope.Benchmark，主要针对线程安全的类</p><p>【3】线程组共享的State[@State(Scope.Group)]</p><p>截止目前，我们所编写的基准测试方法都会被JMH框架会根据方法名的字典顺序排序后按照顺序逐个调用执行，不存两个方法同时运行的情况，如果想要测试某个共享数据或者共享资源在多线程的情况下同时被读写的行为，例如多个线程对ConcurrentHashMap进行读写。<br>1、多线程情况下的单个实例<br>2、允许一个以上基准测试方法并发允许</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample08</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置为线程共享</span>    <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Group</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在线程组“test”中，有三个线程不断为Test实例的write方法进行调用</span>    <span class="token annotation punctuation">@GroupThreads</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Group</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token class-name">Test</span> test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        test<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在线程组“test”中，有三个线程不断为Test实例的read方法进行调用</span>    <span class="token annotation punctuation">@GroupThreads</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Group</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token class-name">Test</span> test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        test<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample08</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-6使用-Param"><a href="#1-3-6使用-Param" class="headerlink" title="1.3.6使用@Param"></a>1.3.6使用@Param</h3><p>【1】对比ConcurrentHashMap和SynchronizedMap性能<br><br>需要保证线程安全的Map容器有ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，对比其put操作性能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token comment">//5个线程同时对共享资源操作</span><span class="token annotation punctuation">@Threads</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//设置为线程间共享资源</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample09</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> concurrentMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> synchronizedMap<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConcurrencyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSychronizedMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample09</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】使用@Param</p><p>@Param可以使得参数配置化，可以测试ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，防止大量的代码冗余</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Threads</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample10</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal map type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample10</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-JMH测试套件-Fixture"><a href="#1-3-7-JMH测试套件-Fixture" class="headerlink" title="1.3.7 JMH测试套件(Fixture)"></a>1.3.7 JMH测试套件(Fixture)</h3><p>与Junit单元的套件@Before,@After,@BeforeClass,@AfterClass类似</p><p>【1】Setup以及TearDown<br>JMH提供了两个注解@Setup和@TearDown用于套件测试，其中@Setup会在每一个基准测试方法执行前被调用，通常用于资源的初始化</p><p>@TearDown套件会在基准测试方法被执行之后调用，通常可用于资源的回收清理工作。</p><p>【2】使用seatup和TeadDown时，默认情况下，Setup和TearDown会在一个基准方法的所有批次执行前后分别执行，如果需要在每一个批次或者每一次基准方法调用执行的前后执行对应的套件方法，则需要对@Setup和@TearDown进行简单配置。</p><ul><li>Trial:    Setup和TearDown的默认配置，该套件方法会在每一个基准测试方法的所有批次执行的前后被执行。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Trial</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Iteration:    由于我们设置Warmup和Measurement，因此每一个基准测试方法都会被执行若干次批次，如果想要在每一个基准测试批次执行的前后调用套件方法，则可以将Level设置为Iteration</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Iteration</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Invocation: 将Level设置为Invocation意味着在每一个批次的度量过程中，每一次对基准方法的调用前后都会执行该套件方法。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>注：JMH不会将套件方法的执行纳入基准方法测试的统计之中。</p><h3 id="1-3-8-CompilerControl"><a href="#1-3-8-CompilerControl" class="headerlink" title="1.3.8 CompilerControl"></a>1.3.8 CompilerControl</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">PI</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample12</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Benchmark</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Benchmark</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample12</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test1()中未进行任何运算，test2()中计算Math.log(Math.PI)</p><p>结果为：</p><pre class="line-numbers language-none"><code class="language-none">Benchmark           Mode  Cnt   Score    Error  UnitsJMHExample12.test1  avgt    5   0.001 ±  0.001  us&#x2F;opJMHExample12.test2  avgt    5  ≈ 10⁻³           us&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中test1和test2无较大差别，由于test2中存在DeadCode，JVM在运行test2时对程序进行了优化，相关代码在运行期进行擦除。</p><p>通过CompilerControl禁止优化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample12</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@CompilerControl</span><span class="token punctuation">(</span><span class="token class-name">CompilerControl<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">EXCLUDE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@CompilerControl</span><span class="token punctuation">(</span><span class="token class-name">CompilerControl<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">EXCLUDE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample12</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为</p><pre class="line-numbers language-none"><code class="language-none">Benchmark           Mode  Cnt  Score   Error  UnitsJMHExample12.test1  avgt    5  0.008 ± 0.005  us&#x2F;opJMHExample12.test2  avgt    5  0.059 ± 0.005  us&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和预期一致</p><p><strong>结论</strong>：<br>如果想要禁止JVM运行期优化</p><ul><li>通过编写程序方式精致JVM运行期动态变异和优化java.lang.Compiler.disable()</li><li>在JVM中添加参数 <code>-Djava.compiler=NONE</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello1</title>
      <link href="/2022/10/13/hello1/"/>
      <url>/2022/10/13/hello1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/R&amp;W/"/>
      <url>/2022/10/11/R&amp;W/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1><ul><li><input checked="" disabled="" type="checkbox"> c</li><li><input checked="" disabled="" type="checkbox"> bm</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/"/>
      <url>/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast Start Markdown in VS</title>
      <link href="/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/"/>
      <url>/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Fast-Start-Markdown-in-VS"><a href="#Fast-Start-Markdown-in-VS" class="headerlink" title="Fast Start Markdown in VS"></a>Fast Start Markdown in VS</h1><blockquote><p>preference: MarkDown All in One</p></blockquote><ul><li><a href="#fast-start-markdown-in-vs">Fast Start Markdown in VS</a><ul><li><a href="#keyboard-shortcuts">keyboard shortcuts:</a></li><li><a href="#markdown-preview">MarkDown Preview</a></li><li><a href="#formula">formula</a></li><li><a href="#html%E6%A0%87%E8%AE%B0">HTML标记</a></li></ul></li></ul><h2 id="keyboard-shortcuts"><a href="#keyboard-shortcuts" class="headerlink" title="keyboard shortcuts:"></a>keyboard shortcuts:</h2><ul><li>ctrl+B: <strong>字体加粗</strong></li><li><input checked="" disabled="" type="checkbox"> alt+C: 打钩<br></li><li>VScode中通过<code>ctrl+shift+p</code>使用命令：<code>Create Table of Contents</code>自动创建目录</li></ul><h2 id="MarkDown-Preview"><a href="#MarkDown-Preview" class="headerlink" title="MarkDown Preview"></a>MarkDown Preview</h2><p>使用命令<code>ctrl+shift+v</code>预览MarkDown</p><h2 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h2><p>使用<code>$g(x)$</code>来表示$g(x)$<br><br>使用<code>$$ f(x) = ax + b $$</code> 来表示<br>$$ f(x) &#x3D; ax + b $$<br>使用<code>$\a$</code>来快速补全<code>a</code>为前缀的Math符号<br></p><div align=center>![快捷键](./%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/image1.png)</div>## HTML标记使用`<br>`来表示换行]]></content>
      
      
      <categories>
          
          <category> VS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="/2022/09/19/test3/"/>
      <url>/2022/09/19/test3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/19/hello-world/"/>
      <url>/2022/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nvm版本管理</title>
      <link href="/2019/09/05/text/"/>
      <url>/2019/09/05/text/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
