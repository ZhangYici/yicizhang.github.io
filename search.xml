<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>high_performance_MySQL</title>
      <link href="/2022/10/20/high-performance-MySQL/"/>
      <url>/2022/10/20/high-performance-MySQL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JMH1</title>
      <link href="/2022/10/19/JMH1/"/>
      <url>/2022/10/19/JMH1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#14%E7%BC%96%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E4%BB%A5%E5%8F%8A%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">1.4编写正确的微基准测试以及高级用法</a><ul><li><a href="#141-%E7%BC%96%E5%86%99%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%BE%AE%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B">1.4.1 编写正确的微基准测试用例</a></li><li><a href="#142-%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95">1.4.2 高级用法</a></li></ul></li><li><a href="#15jmh%E7%9A%84profiler">1.5JMH的Profiler</a><ul><li><a href="#151-stackprofiler">1.5.1 StackProfiler</a></li><li><a href="#152-gcprofiler">1.5.2 GcProfiler</a></li><li><a href="#153-classloaderprofiler">1.5.3 ClassLoaderProfiler</a></li><li><a href="#154-compilerprofiler">1.5.4 CompilerProfiler</a></li></ul></li><li><a href="#16%E6%9C%AC%E7%AB%A0%E6%80%BB%E7%BB%93">1.6本章总结</a></li></ul><h2 id="1-4编写正确的微基准测试以及高级用法"><a href="#1-4编写正确的微基准测试以及高级用法" class="headerlink" title="1.4编写正确的微基准测试以及高级用法"></a>1.4编写正确的微基准测试以及高级用法</h2><h3 id="1-4-1-编写正确的微基准测试用例"><a href="#1-4-1-编写正确的微基准测试用例" class="headerlink" title="1.4.1 编写正确的微基准测试用例"></a>1.4.1 编写正确的微基准测试用例</h3><p>【1】避免DCE(Dead Code Elimination)</p><p><strong>Dead Code Elimination 是JVM擦去了一些上下文无关或者计算不会用到的代码片段</strong></p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JVM优化中，该test方法可能会被当做一个空方法看待。</p><p>【2】使用Blackhole<br>Blackhole可以允许无返回值的函数不进行DC（Dead Code）。</p><p>用法如下示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>infra<span class="token punctuation">.</span></span><span class="token class-name">Blackhole</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample14</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x1 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x2 <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">powButReturnOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//DC，会被擦除</span>        <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不会被擦除，有返回值</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">powThenAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useBlackhole</span><span class="token punctuation">(</span><span class="token class-name">Blackhole</span> blackhole<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blackhole<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample14</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：使用blackhole需要</p><h3 id="1-4-2-高级用法"><a href="#1-4-2-高级用法" class="headerlink" title="1.4.2 高级用法"></a>1.4.2 高级用法</h3><h2 id="1-5JMH的Profiler"><a href="#1-5JMH的Profiler" class="headerlink" title="1.5JMH的Profiler"></a>1.5JMH的Profiler</h2><h3 id="1-5-1-StackProfiler"><a href="#1-5-1-StackProfiler" class="headerlink" title="1.5.1 StackProfiler"></a>1.5.1 StackProfiler</h3><h3 id="1-5-2-GcProfiler"><a href="#1-5-2-GcProfiler" class="headerlink" title="1.5.2 GcProfiler"></a>1.5.2 GcProfiler</h3><h3 id="1-5-3-ClassLoaderProfiler"><a href="#1-5-3-ClassLoaderProfiler" class="headerlink" title="1.5.3 ClassLoaderProfiler"></a>1.5.3 ClassLoaderProfiler</h3><h3 id="1-5-4-CompilerProfiler"><a href="#1-5-4-CompilerProfiler" class="headerlink" title="1.5.4 CompilerProfiler"></a>1.5.4 CompilerProfiler</h3><h2 id="1-6本章总结"><a href="#1-6本章总结" class="headerlink" title="1.6本章总结"></a>1.6本章总结</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA高并发笔记之JMH(上)</title>
      <link href="/2022/10/14/JMH0/"/>
      <url>/2022/10/14/JMH0/</url>
      
        <content type="html"><![CDATA[<h1 id="JMH"><a href="#JMH" class="headerlink" title="JMH"></a>JMH</h1><ul><li><a href="#jmh">JMH</a><ul><li><a href="#1jmh%E7%AE%80%E4%BB%8B">1.JMH简介</a></li><li><a href="#12-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">1.2 快速入门</a><ul><li><a href="#121-main%E6%96%B9%E6%B3%95%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%8D%E4%B8%A5%E8%B0%A8">1.2.1 main方法的测试（不严谨）</a></li><li><a href="#122-jmh%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95">1.2.2 JMH方法进行基准测试</a></li></ul></li><li><a href="#13-jmh%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">1.3 JMH基本用法</a><ul><li><a href="#131-benchmark%E6%A0%87%E8%AE%B0%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95">1.3.1 @Benchmark标记基准测试方法</a></li><li><a href="#132-warmup%E4%BB%A5%E5%8F%8Ameasurement">1.3.2 Warmup以及Measurement</a></li><li><a href="#133-%E5%9B%9B%E7%A7%8Dbenchmarkmode">1.3.3 四种BenchmarkMode</a></li><li><a href="#134-outputtimeunit">1.3.4 OutputTimeUnit</a></li><li><a href="#135%E4%B8%89%E5%A4%A7state%E7%9A%84%E4%BD%BF%E7%94%A8">1.3.5三大State的使用</a></li><li><a href="#136%E4%BD%BF%E7%94%A8param">1.3.6使用@Param</a></li><li><a href="#137-jmh%E6%B5%8B%E8%AF%95%E5%A5%97%E4%BB%B6fixture">1.3.7 JMH测试套件(Fixture)</a></li><li><a href="#138-compilercontrol">1.3.8 CompilerControl</a></li></ul></li></ul></li></ul><h2 id="1-JMH简介"><a href="#1-JMH简介" class="headerlink" title="1.JMH简介"></a>1.JMH简介</h2><p>JMH是Java Micro Benchmark Harness的简写，是用于代码微基准测试的工具集。<br>JMH的官网地址:<a href="http://openjdk.java.net/projects/code-tools/jmh/">http://openjdk.java.net/projects/code-tools/jmh/</a></p><h2 id="1-2-快速入门"><a href="#1-2-快速入门" class="headerlink" title="1.2 快速入门"></a>1.2 快速入门</h2><h3 id="1-2-1-main方法的测试（不严谨）"><a href="#1-2-1-main方法的测试（不严谨）" class="headerlink" title="1.2.1 main方法的测试（不严谨）"></a>1.2.1 main方法的测试（不严谨）</h3><p>测试ArrayList和LinkedList的写入10000000次字符串，使用add方法调用，重复执行10次，比较最大值、最小值、平均值（此处忽略了内存开销）。<br></p><p>使用前添加maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>31.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码如下所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayVSLinked</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">"DUMMY DATA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_CAPACITY</span> <span class="token operator">=</span> <span class="token number">10_000_000</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">MAX_ITERATIONS</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_CAPACITY</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arrayListPerfTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> iterations<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">linkedListPerfTest</span><span class="token punctuation">(</span><span class="token keyword">int</span> iterations<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token class-name">Stopwatch</span> stopwatch <span class="token operator">=</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">.</span><span class="token function">createStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">test</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stopwatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">elapsed</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">arrayListPerfTest</span><span class="token punctuation">(</span><span class="token constant">MAX_ITERATIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">linkedListPerfTest</span><span class="token punctuation">(</span><span class="token constant">MAX_ITERATIONS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为<br></p><table><thead><tr><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td>105</td><td>1073</td></tr><tr><td>90</td><td>32</td></tr><tr><td>114</td><td>67</td></tr><tr><td>69</td><td>425</td></tr><tr><td>90</td><td>33</td></tr><tr><td>103</td><td>31</td></tr><tr><td>32</td><td>1322</td></tr><tr><td>68</td><td>31</td></tr><tr><td>99</td><td>31</td></tr><tr><td>31</td><td>1556</td></tr></tbody></table><p>折线图为：<br><img src="/./JMH/image1.png"><br>ArrayList的性能看起来好于LinkedList，事实上ArrayList的随机读写性能好于LinkedList，但是LinkedList是链表结构设计，其delete性能会好于ArrayList。<br>存在的问题：</p><ol><li>Stopwatch进行计算，会导致CPU时间浪费</li><li>JVM可能会对运行时优化，如循环展开、运行时编译</li><li>两个方法的运行环境不公平，第一个方法结束后JVM可能已经惊醒了profiler优化或者内存未被释放。</li></ol><h3 id="1-2-2-JMH方法进行基准测试"><a href="#1-2-2-JMH方法进行基准测试" class="headerlink" title="1.2.2 JMH方法进行基准测试"></a>1.2.2 JMH方法进行基准测试</h3><p>在maven中添加依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.35<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">DATA</span> <span class="token operator">=</span> <span class="token string">"DUMMY DATA"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> arrayList<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> linkedList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">arrayListAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">linkedListAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">DATA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> linkedList<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> opts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># JMH version: 1.35</span><span class="token comment"># VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span><span class="token comment"># VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span><span class="token comment"># VM options: -Dvisualvm.id=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span><span class="token comment"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span><span class="token comment"># Warmup: 10 iterations, 10 s each</span><span class="token comment"># Measurement: 10 iterations, 10 s each</span><span class="token comment"># Timeout: 10 min per iteration</span><span class="token comment"># Threads: 1 thread, will synchronize iterations</span><span class="token comment"># Benchmark mode: Average time, time/op</span><span class="token comment"># Benchmark: concurrent.jmh.JMHExample01.arrayListAdd</span><span class="token comment"># Run progress: 0.00% complete, ETA 00:06:40</span><span class="token comment"># Fork: 1 of 1</span><span class="token comment"># Warmup Iteration   1: 0.026 us/op</span><span class="token comment"># Warmup Iteration   2: 0.027 us/op</span><span class="token comment"># Warmup Iteration   3: 0.040 us/op</span><span class="token comment"># Warmup Iteration   4: 0.040 us/op</span><span class="token comment"># Warmup Iteration   5: 0.026 us/op</span><span class="token comment"># Warmup Iteration   6: 0.037 us/op</span><span class="token comment"># Warmup Iteration   7: 0.040 us/op</span><span class="token comment"># Warmup Iteration   8: 0.049 us/op</span><span class="token comment"># Warmup Iteration   9: 0.040 us/op</span><span class="token comment"># Warmup Iteration  10: 0.040 us/op</span>Iteration   <span class="token number">1</span>: <span class="token number">0.040</span> us/opIteration   <span class="token number">2</span>: <span class="token number">0.027</span> us/opIteration   <span class="token number">3</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">4</span>: <span class="token number">0.026</span> us/opIteration   <span class="token number">5</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">6</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">7</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">8</span>: <span class="token number">0.025</span> us/opIteration   <span class="token number">9</span>: <span class="token number">0.025</span> us/opIteration  <span class="token number">10</span>: <span class="token number">0.037</span> us/opResult <span class="token string">"concurrent.jmh.JMHExample01.arrayListAdd"</span><span class="token builtin class-name">:</span>  <span class="token number">0.028</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span> <span class="token number">0.009</span> us/op <span class="token punctuation">[</span>Average<span class="token punctuation">]</span>  <span class="token punctuation">(</span>min, avg, max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.025</span>, <span class="token number">0.028</span>, <span class="token number">0.040</span><span class="token punctuation">)</span>, stdev <span class="token operator">=</span> <span class="token number">0.006</span>  CI <span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span>: <span class="token punctuation">[</span><span class="token number">0.019</span>, <span class="token number">0.037</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span><span class="token comment"># JMH version: 1.35</span><span class="token comment"># VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09</span><span class="token comment"># VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe</span><span class="token comment"># VM options: -Dvisualvm.id=343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar=58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding=UTF-8</span><span class="token comment"># Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)</span><span class="token comment"># Warmup: 10 iterations, 10 s each</span><span class="token comment"># Measurement: 10 iterations, 10 s each</span><span class="token comment"># Timeout: 10 min per iteration</span><span class="token comment"># Threads: 1 thread, will synchronize iterations</span><span class="token comment"># Benchmark mode: Average time, time/op</span><span class="token comment"># Benchmark: concurrent.jmh.JMHExample01.linkedListAdd</span><span class="token comment"># Run progress: 50.00% complete, ETA 00:03:21</span><span class="token comment"># Fork: 1 of 1</span><span class="token comment"># Warmup Iteration   1: 0.027 us/op</span><span class="token comment"># Warmup Iteration   2: 0.038 us/op</span><span class="token comment"># Warmup Iteration   3: 0.039 us/op</span><span class="token comment"># Warmup Iteration   4: 0.028 us/op</span><span class="token comment"># Warmup Iteration   5: 0.031 us/op</span><span class="token comment"># Warmup Iteration   6: 0.037 us/op</span><span class="token comment"># Warmup Iteration   7: 0.037 us/op</span><span class="token comment"># Warmup Iteration   8: 0.038 us/op</span><span class="token comment"># Warmup Iteration   9: 0.038 us/op</span><span class="token comment"># Warmup Iteration  10: 0.038 us/op</span>Iteration   <span class="token number">1</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">2</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">3</span>: <span class="token number">0.039</span> us/opIteration   <span class="token number">4</span>: <span class="token number">0.041</span> us/opIteration   <span class="token number">5</span>: <span class="token number">0.040</span> us/opIteration   <span class="token number">6</span>: <span class="token number">0.046</span> us/opIteration   <span class="token number">7</span>: <span class="token number">0.038</span> us/opIteration   <span class="token number">8</span>: <span class="token number">0.038</span> us/opIteration   <span class="token number">9</span>: <span class="token number">0.038</span> us/opIteration  <span class="token number">10</span>: <span class="token number">0.038</span> us/opResult <span class="token string">"concurrent.jmh.JMHExample01.linkedListAdd"</span><span class="token builtin class-name">:</span>  <span class="token number">0.040</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span> <span class="token number">0.004</span> us/op <span class="token punctuation">[</span>Average<span class="token punctuation">]</span>  <span class="token punctuation">(</span>min, avg, max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.038</span>, <span class="token number">0.040</span>, <span class="token number">0.046</span><span class="token punctuation">)</span>, stdev <span class="token operator">=</span> <span class="token number">0.003</span>  CI <span class="token punctuation">(</span><span class="token number">99.9</span>%<span class="token punctuation">)</span>: <span class="token punctuation">[</span><span class="token number">0.036</span>, <span class="token number">0.044</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span><span class="token comment"># Run complete. Total time: 00:06:42</span>REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up onwhy the numbers are the way they are. Use profilers <span class="token punctuation">(</span>see -prof, -lprof<span class="token punctuation">)</span>, design factorialexperiments, perform baseline and negative tests that provide experimental control, <span class="token function">make</span> surethe benchmarking environment is safe on JVM/OS/HW level, ask <span class="token keyword">for</span> reviews from the domain experts.Do not assume the numbers tell you what you want them to tell.Benchmark                   Mode  Cnt  Score   Error  UnitsJMHExample01.arrayListAdd   avgt   <span class="token number">10</span>  <span class="token number">0.028</span> ± <span class="token number">0.009</span>  us/opJMHExample01.linkedListAdd  avgt   <span class="token number">10</span>  <span class="token number">0.040</span> ± <span class="token number">0.004</span>  us/opProcess finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-JMH基本用法"><a href="#1-3-JMH基本用法" class="headerlink" title="1.3 JMH基本用法"></a>1.3 JMH基本用法</h2><h3 id="1-3-1-Benchmark标记基准测试方法"><a href="#1-3-1-Benchmark标记基准测试方法" class="headerlink" title="1.3.1 @Benchmark标记基准测试方法"></a>1.3.1 @Benchmark标记基准测试方法</h3><p>被测试的方法需要被标注为@Benchmark<br>否则会被视为普通方法，不会对其进行测试<br>如果一个类中无任何基准测试方法，那么会抛出异常。</p><h3 id="1-3-2-Warmup以及Measurement"><a href="#1-3-2-Warmup以及Measurement" class="headerlink" title="1.3.2 Warmup以及Measurement"></a>1.3.2 Warmup以及Measurement</h3><p>（1）设置全局Warmup和Measurement<br><br>【1】构造options时设置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Options</span> opts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample01</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">measurementIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//度量10次，只有这10次对基准方法的调用将会计入统计</span><span class="token function">warmupIterations</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token comment">//在度量前，进行10个批次热身，确保代码经过JVM优化</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】使用注解设置@Measurement和Warmup</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iteration<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//度量5个批次</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iteration<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//预热3个批次</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample03</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）在基准测试方法上设置Warmup和Measurement</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample03</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">&#123;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample03</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forks</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中test()方法执行了2个批次预热和5个批次度量，test2()方法执行了10个批次度量和5个批次预热，方法上的注解会覆盖掉全局的注解。<br></p><hr><p>test()方法</p><pre class="line-numbers language-none"><code class="language-none"># Warmup: 2 iterations, 10 s each# Measurement: 5 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time&#x2F;op# Benchmark: concurrent.jmh.JMHExample03.test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>test2()方法</p><pre class="line-numbers language-none"><code class="language-none"># Warmup: 5 iterations, 10 s each# Measurement: 10 iterations, 10 s each# Timeout: 10 min per iteration# Threads: 1 thread, will synchronize iterations# Benchmark mode: Average time, time&#x2F;op# Benchmark: concurrent.jmh.JMHExample03.test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）相关的输出解释</p><pre class="line-numbers language-none"><code class="language-none"># JMH版本# JMH version: 1.35# JDK版本信息# VM version: JDK 1.8.0_332, OpenJDK 64-Bit Server VM, 25.332-b09# JAVA命令目录# VM invoker: C:\Program Files\Eclipse Adoptium\jdk-8.0.332.9-hotspot\jre\bin\java.exe# JVM参数# VM options: -Dvisualvm.id&#x3D;343572344193100 -javaagent:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\lib\idea_rt.jar&#x3D;58699:C:\Program Files\JetBrains\IntelliJ IDEA 2021.2.2\bin -Dfile.encoding&#x3D;UTF-8# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect&#x3D;false to disable)# 热身批次为10，每一个批次调用测试方法，每个批次执行时间10s# Warmup: 10 iterations, 10 s each# 真正度量批次为10，每个度量的执行时间为10s# Measurement: 10 iterations, 10 s each# 每个批次的超时时间# Timeout: 10 min per iteration# 基准测试线程数# Threads: 1 thread, will synchronize iterations# Benchmark的模式，AverageTime表示调用一次耗费的单位时间（time&#x2F;op）# Benchmark mode: Average time, time&#x2F;op# Benchmark方法的路径# Benchmark: concurrent.jmh.JMHExample01.linkedListAdd# 执行进度# Run progress: 50.00% complete, ETA 00:03:21# Fork: 1 of 1# 10个批次热身，每个批次的调用方法的平均耗时# Warmup Iteration   1: 0.027 us&#x2F;op# Warmup Iteration   2: 0.038 us&#x2F;op# Warmup Iteration   3: 0.039 us&#x2F;op# Warmup Iteration   4: 0.028 us&#x2F;op# Warmup Iteration   5: 0.031 us&#x2F;op# Warmup Iteration   6: 0.037 us&#x2F;op# Warmup Iteration   7: 0.037 us&#x2F;op# Warmup Iteration   8: 0.038 us&#x2F;op# Warmup Iteration   9: 0.038 us&#x2F;op# Warmup Iteration  10: 0.038 us&#x2F;op# 5个批次的度量Iteration   1: 0.039 us&#x2F;opIteration   2: 0.039 us&#x2F;opIteration   3: 0.039 us&#x2F;opIteration   4: 0.041 us&#x2F;opIteration   5: 0.040 us&#x2F;opIteration   6: 0.046 us&#x2F;opIteration   7: 0.038 us&#x2F;opIteration   8: 0.038 us&#x2F;opIteration   9: 0.038 us&#x2F;opIteration  10: 0.038 us&#x2F;op# 最终结果Result &quot;concurrent.jmh.JMHExample01.linkedListAdd&quot;:  0.040 ±(99.9%) 0.004 us&#x2F;op [Average]  # 最小，平均，最大和标准误差  (min, avg, max) &#x3D; (0.038, 0.040, 0.046), stdev &#x3D; 0.003  CI (99.9%): [0.036, 0.044] (assumes normal distribution)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-3-四种BenchmarkMode"><a href="#1-3-3-四种BenchmarkMode" class="headerlink" title="1.3.3 四种BenchmarkMode"></a>1.3.3 四种BenchmarkMode</h3><p>1.AverageTime（平均响应时间）输出基准测试方法没调用一次的耗时</p><p> 2.Throughput（方法吞吐量）与AverageTime相反，表示单位时间内对该方法调用的次数 </p><p> 3.SampleTime（时间采样）采用抽样方式来统计方法的性能结果。</p><p> 4.SingleShotTime(冷测试)不管是Warmup还是Measurement，每一个批次中基准测试方法只会被执行一次，一般来说，Warmup为0.<P> 5.多Mode以及All，除了设置单个BechmarkMode之外，可以设置多个Mode或者All<br>@BenchmarkMode(Mode.AverageTime,Mode.Throughput)和@BenchmarkMode(Mode.All)</p>注：Options的参数会覆盖方法的注解，方法的注解会覆盖class上的注解<h3 id="1-3-4-OutputTimeUnit"><a href="#1-3-4-OutputTimeUnit" class="headerlink" title="1.3.4 OutputTimeUnit"></a>1.3.4 OutputTimeUnit</h3><p>提供了统计结果输出时的单位，比如调用一次该方法将会耗费多少单位时间，或者单位时间内对该方法进行多少次调用。<br>OutputTimeUnit既可以设置在class上，也可以设置在method上，还可以在Options中设置，覆盖次序与Benchmark一致。</p><h3 id="1-3-5三大State的使用"><a href="#1-3-5三大State的使用" class="headerlink" title="1.3.5三大State的使用"></a>1.3.5三大State的使用</h3><p>三大State分别对应于Scope的三个枚举值</p><ul><li>Benchmark</li><li>Thread</li><li>Group</li></ul><p>【1】Thread独享的State[@State(Scope.Thread)]<br>线程独享的State指的是，每一个运行基准测试方法的线程都会持有一个独立的对象实例，该实例既可以作为基准测试方法传入，也可能是class的注解将State设置为Scope.Thread，一般主要针对非线程安全的类。例如AarrayList和LinkedList。</p><p>【2】Thread共享的State[@State(Scope.Benchmark)]<br>有时候需要测试多线程情况下，梅格雷被不同线程操作的性能，比如，多线程访问某个共享数据，需要让多线程使用同一个实例。因此<br>将State设置为Scope.Benchmark，主要针对线程安全的类</p><p>【3】线程组共享的State[@State(Scope.Group)]</p><p>截止目前，我们所编写的基准测试方法都会被JMH框架会根据方法名的字典顺序排序后按照顺序逐个调用执行，不存两个方法同时运行的情况，如果想要测试某个共享数据或者共享资源在多线程的情况下同时被读写的行为，例如多个线程对ConcurrentHashMap进行读写。<br>1、多线程情况下的单个实例<br>2、允许一个以上基准测试方法并发允许</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample08</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置为线程共享</span>    <span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Group</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在线程组“test”中，有三个线程不断为Test实例的write方法进行调用</span>    <span class="token annotation punctuation">@GroupThreads</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Group</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWrite</span><span class="token punctuation">(</span><span class="token class-name">Test</span> test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        test<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//在线程组“test”中，有三个线程不断为Test实例的read方法进行调用</span>    <span class="token annotation punctuation">@GroupThreads</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Group</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRead</span><span class="token punctuation">(</span><span class="token class-name">Test</span> test<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        test<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample08</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-6使用-Param"><a href="#1-3-6使用-Param" class="headerlink" title="1.3.6使用@Param"></a>1.3.6使用@Param</h3><p>【1】对比ConcurrentHashMap和SynchronizedMap性能<br><br>需要保证线程安全的Map容器有ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，对比其put操作性能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token comment">//5个线程同时对共享资源操作</span><span class="token annotation punctuation">@Threads</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//设置为线程间共享资源</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample09</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> concurrentMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> synchronizedMap<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        synchronizedMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testConcurrencyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>concurrentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSychronizedMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>synchronizedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample09</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【2】使用@Param</p><p>@Param可以使得参数配置化，可以测试ConcurrentHashMap、Hashtable、ConcurrentSkipListMap以及SynchronizedMap，防止大量的代码冗余</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Threads</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Benchmark</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample10</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> map<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Setup</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentSkipListMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>map <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">default</span><span class="token operator">:</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal map type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample10</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-7-JMH测试套件-Fixture"><a href="#1-3-7-JMH测试套件-Fixture" class="headerlink" title="1.3.7 JMH测试套件(Fixture)"></a>1.3.7 JMH测试套件(Fixture)</h3><p>与Junit单元的套件@Before,@After,@BeforeClass,@AfterClass类似</p><p>【1】Setup以及TearDown<br>JMH提供了两个注解@Setup和@TearDown用于套件测试，其中@Setup会在每一个基准测试方法执行前被调用，通常用于资源的初始化</p><p>@TearDown套件会在基准测试方法被执行之后调用，通常可用于资源的回收清理工作。</p><p>【2】使用seatup和TeadDown时，默认情况下，Setup和TearDown会在一个基准方法的所有批次执行前后分别执行，如果需要在每一个批次或者每一次基准方法调用执行的前后执行对应的套件方法，则需要对@Setup和@TearDown进行简单配置。</p><ul><li>Trial:    Setup和TearDown的默认配置，该套件方法会在每一个基准测试方法的所有批次执行的前后被执行。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Trial</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Iteration:    由于我们设置Warmup和Measurement，因此每一个基准测试方法都会被执行若干次批次，如果想要在每一个基准测试批次执行的前后调用套件方法，则可以将Level设置为Iteration</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Iteration</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Invocation: 将Level设置为Invocation意味着在每一个批次的度量过程中，每一次对基准方法的调用前后都会执行该套件方法。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Setup</span><span class="token punctuation">(</span><span class="token class-name">Level<span class="token punctuation">.</span>Invocation</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>注：JMH不会将套件方法的执行纳入基准方法测试的统计之中。</p><h3 id="1-3-8-CompilerControl"><a href="#1-3-8-CompilerControl" class="headerlink" title="1.3.8 CompilerControl"></a>1.3.8 CompilerControl</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">concurrent<span class="token punctuation">.</span>jmh</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">PI</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token static">log</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample12</span> <span class="token punctuation">&#123;</span>   <span class="token annotation punctuation">@Benchmark</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Benchmark</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample12</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test1()中未进行任何运算，test2()中计算Math.log(Math.PI)</p><p>结果为：</p><pre class="line-numbers language-none"><code class="language-none">Benchmark           Mode  Cnt   Score    Error  UnitsJMHExample12.test1  avgt    5   0.001 ±  0.001  us&#x2F;opJMHExample12.test2  avgt    5  ≈ 10⁻³           us&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中test1和test2无较大差别，由于test2中存在DeadCode，JVM在运行test2时对程序进行了优化，相关代码在运行期进行擦除。</p><p>通过CompilerControl禁止优化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MICROSECONDS</span><span class="token punctuation">)</span><span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHExample12</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@CompilerControl</span><span class="token punctuation">(</span><span class="token class-name">CompilerControl<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">EXCLUDE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@CompilerControl</span><span class="token punctuation">(</span><span class="token class-name">CompilerControl<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">EXCLUDE</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Benchmark</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHExample12</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为</p><pre class="line-numbers language-none"><code class="language-none">Benchmark           Mode  Cnt  Score   Error  UnitsJMHExample12.test1  avgt    5  0.008 ± 0.005  us&#x2F;opJMHExample12.test2  avgt    5  0.059 ± 0.005  us&#x2F;op<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和预期一致</p><p><strong>结论</strong>：<br>如果想要禁止JVM运行期优化</p><ul><li>通过编写程序方式精致JVM运行期动态变异和优化java.lang.Compiler.disable()</li><li>在JVM中添加参数 <code>-Djava.compiler=NONE</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello1</title>
      <link href="/2022/10/13/hello1/"/>
      <url>/2022/10/13/hello1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/R&amp;W/"/>
      <url>/2022/10/11/R&amp;W/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1><ul><li><input checked="" disabled="" type="checkbox"> c</li><li><input checked="" disabled="" type="checkbox"> bm</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello</title>
      <link href="/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/"/>
      <url>/2022/10/11/java%E4%B8%AD%E7%9A%84%E8%AF%BB%E4%B8%8E%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="Serval-ways-of-Read-and-Write-in-Java"><a href="#Serval-ways-of-Read-and-Write-in-Java" class="headerlink" title="Serval ways of Read and Write in Java"></a>Serval ways of Read and Write in Java</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fast Start Markdown in VS</title>
      <link href="/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/"/>
      <url>/2022/10/11/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Fast-Start-Markdown-in-VS"><a href="#Fast-Start-Markdown-in-VS" class="headerlink" title="Fast Start Markdown in VS"></a>Fast Start Markdown in VS</h1><blockquote><p>preference: MarkDown All in One</p></blockquote><ul><li><a href="#fast-start-markdown-in-vs">Fast Start Markdown in VS</a><ul><li><a href="#keyboard-shortcuts">keyboard shortcuts:</a></li><li><a href="#markdown-preview">MarkDown Preview</a></li><li><a href="#formula">formula</a></li><li><a href="#html%E6%A0%87%E8%AE%B0">HTML标记</a></li></ul></li></ul><h2 id="keyboard-shortcuts"><a href="#keyboard-shortcuts" class="headerlink" title="keyboard shortcuts:"></a>keyboard shortcuts:</h2><ul><li>ctrl+B: <strong>字体加粗</strong></li><li><input checked="" disabled="" type="checkbox"> alt+C: 打钩<br></li><li>VScode中通过<code>ctrl+shift+p</code>使用命令：<code>Create Table of Contents</code>自动创建目录</li></ul><h2 id="MarkDown-Preview"><a href="#MarkDown-Preview" class="headerlink" title="MarkDown Preview"></a>MarkDown Preview</h2><p>使用命令<code>ctrl+shift+v</code>预览MarkDown</p><h2 id="formula"><a href="#formula" class="headerlink" title="formula"></a>formula</h2><p>使用<code>$g(x)$</code>来表示$g(x)$<br><br>使用<code>$$ f(x) = ax + b $$</code> 来表示<br>$$ f(x) &#x3D; ax + b $$<br>使用<code>$\a$</code>来快速补全<code>a</code>为前缀的Math符号<br></p><div align=center>![快捷键](./%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8markdown/image1.png)</div>## HTML标记使用`<br>`来表示换行]]></content>
      
      
      <categories>
          
          <category> VS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test3</title>
      <link href="/2022/09/19/test3/"/>
      <url>/2022/09/19/test3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/19/hello-world/"/>
      <url>/2022/09/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nvm版本管理</title>
      <link href="/2019/09/05/text/"/>
      <url>/2019/09/05/text/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> npm </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
